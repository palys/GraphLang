Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    XOR
    STRING
    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> objects_definitions scene
Rule 2     objects_definitions -> objects_definitions object_definition
Rule 3     objects_definitions -> <empty>
Rule 4     object_definition -> DEF ID { object_body }
Rule 5     object_body -> default_color_definition ; declarations new_body_rest
Rule 6     default_color_definition -> DEFAULT_COLOR ( expression , expression , expression )
Rule 7     new_body_rest -> blocks object_body_rest
Rule 8     new_body_rest -> blocks
Rule 9     block -> assigment ;
Rule 10    block -> if_expr
Rule 11    block -> while_expr
Rule 12    block -> color_node ;
Rule 13    blocks -> blocks block
Rule 14    blocks -> <empty>
Rule 15    object_body_rest -> shape_with_transformations blocks object_body_rest
Rule 16    object_body_rest -> shape_with_transformations blocks
Rule 17    object_body_rest -> shape_without_transformations blocks object_body_rest
Rule 18    object_body_rest -> shape_without_transformations blocks
Rule 19    shape_with_transformations -> shape ; transformation_nodes
Rule 20    shape_without_transformations -> shape ;
Rule 21    transformation_nodes -> transformation_node ; transformation_nodes
Rule 22    transformation_nodes -> transformation_node ;
Rule 23    transformation_node -> rotate_node
Rule 24    transformation_node -> translation_node
Rule 25    transformation_node -> scale_node
Rule 26    transformation_node -> color_node
Rule 27    rotate_node -> ROTATE ( expression )
Rule 28    translation_node -> TRANSLATE ( expression , expression )
Rule 29    color_node -> COLOR ( expression , expression , expression )
Rule 30    scale_node -> SCALE ( expression )
Rule 31    scale_node -> SCALE ( expression , expression )
Rule 32    shape -> primitive
Rule 33    shape -> usage
Rule 34    primitive -> rectangle
Rule 35    primitive -> circle
Rule 36    primitive -> oval
Rule 37    rectangle -> RECTANGLE ( expression , expression , expression , expression )
Rule 38    rectangle -> RECTANGLE ( expression , expression , expression , expression , expression )
Rule 39    circle -> CIRCLE ( expression , expression , expression )
Rule 40    oval -> OVAL ( expression , expression , expression , expression )
Rule 41    oval -> OVAL ( expression , expression , expression , expression , expression )
Rule 42    usage -> ID
Rule 43    scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest }
Rule 44    declarations -> declaration ; declarations
Rule 45    declarations -> <empty>
Rule 46    type -> int_type
Rule 47    type -> float_type
Rule 48    int_type -> INT_TYPE
Rule 49    float_type -> FLOAT_TYPE
Rule 50    declaration -> type declarators
Rule 51    declarators -> declarator , declarators
Rule 52    declarators -> declarator
Rule 53    declarator -> declarator_of_id
Rule 54    declarator -> assigment
Rule 55    declarator_of_id -> ID
Rule 56    assigment -> ID = expression
Rule 57    expression -> const_expr
Rule 58    expression -> id_expr
Rule 59    expression -> two_arg_expr
Rule 60    expression -> expr_in_brackets
Rule 61    const_expr -> int_const_expr
Rule 62    const_expr -> float_const_expr
Rule 63    float_const_expr -> FLOAT
Rule 64    int_const_expr -> INTEGER
Rule 65    id_expr -> ID
Rule 66    two_arg_expr -> expression + expression
Rule 67    two_arg_expr -> expression - expression
Rule 68    two_arg_expr -> expression * expression
Rule 69    two_arg_expr -> expression / expression
Rule 70    two_arg_expr -> expression L expression
Rule 71    two_arg_expr -> expression LE expression
Rule 72    two_arg_expr -> expression G expression
Rule 73    two_arg_expr -> expression GE expression
Rule 74    two_arg_expr -> expression EQ expression
Rule 75    two_arg_expr -> expression NE expression
Rule 76    expr_in_brackets -> ( expression )
Rule 77    if_expr -> IF ( expression ) { new_body_rest }
Rule 78    if_expr -> IF ( expression ) { new_body_rest } ELSE { new_body_rest }
Rule 79    while_expr -> WHILE ( expression ) { new_body_rest }

Terminals, with rules where they appear

(                    : 6 27 28 29 30 31 37 38 39 40 41 43 43 76 77 78 79
)                    : 6 27 28 29 30 31 37 38 39 40 41 43 43 76 77 78 79
*                    : 68
+                    : 66
,                    : 6 6 28 29 29 31 37 37 37 38 38 38 38 39 39 40 40 40 41 41 41 41 43 43 43 51
-                    : 67
/                    : 69
;                    : 5 9 12 19 20 21 22 43 44
=                    : 56
AND                  : 
BACKGROUND           : 43
CIRCLE               : 39
COLOR                : 29
DEF                  : 4
DEFAULT_COLOR        : 6
ELSE                 : 78
EQ                   : 74
FLOAT                : 63
FLOAT_TYPE           : 49
G                    : 72
GE                   : 73
ID                   : 4 42 55 56 65
IF                   : 77 78
INTEGER              : 43 43 64
INT_TYPE             : 48
L                    : 70
LE                   : 71
NE                   : 75
OR                   : 
OVAL                 : 40 41
RECTANGLE            : 37 38
ROTATE               : 27
SCALE                : 30 31
SCENE                : 43
STRING               : 
TRANSLATE            : 28
WHILE                : 79
XOR                  : 
error                : 
{                    : 4 43 77 78 78 79
}                    : 4 43 77 78 78 79

Nonterminals, with rules where they appear

assigment            : 9 54
block                : 13
blocks               : 7 8 13 15 16 17 18
circle               : 35
color_node           : 12 26
const_expr           : 57
declaration          : 44
declarations         : 5 43 44
declarator           : 51 52
declarator_of_id     : 53
declarators          : 50 51
default_color_definition : 5
expr_in_brackets     : 60
expression           : 6 6 6 27 28 28 29 29 29 30 31 31 37 37 37 37 38 38 38 38 38 39 39 39 40 40 40 40 41 41 41 41 41 43 43 43 56 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 77 78 79
float_const_expr     : 62
float_type           : 47
id_expr              : 58
if_expr              : 10
int_const_expr       : 61
int_type             : 46
new_body_rest        : 5 43 77 78 78 79
object_body          : 4
object_body_rest     : 7 15 17
object_definition    : 2
objects_definitions  : 1 2
oval                 : 36
primitive            : 32
program              : 0
rectangle            : 34
rotate_node          : 23
scale_node           : 25
scene                : 1
shape                : 19 20
shape_with_transformations : 15 16
shape_without_transformations : 17 18
transformation_node  : 21 22
transformation_nodes : 19 21
translation_node     : 24
two_arg_expr         : 59
type                 : 50
usage                : 33
while_expr           : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . objects_definitions scene
    (2) objects_definitions -> . objects_definitions object_definition
    (3) objects_definitions -> .

    SCENE           reduce using rule 3 (objects_definitions -> .)
    DEF             reduce using rule 3 (objects_definitions -> .)

    program                        shift and go to state 1
    objects_definitions            shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> objects_definitions . scene
    (2) objects_definitions -> objects_definitions . object_definition
    (43) scene -> . SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest }
    (4) object_definition -> . DEF ID { object_body }

    SCENE           shift and go to state 4
    DEF             shift and go to state 6

    scene                          shift and go to state 3
    object_definition              shift and go to state 5

state 3

    (1) program -> objects_definitions scene .

    $end            reduce using rule 1 (program -> objects_definitions scene .)


state 4

    (43) scene -> SCENE . ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest }

    (               shift and go to state 7


state 5

    (2) objects_definitions -> objects_definitions object_definition .

    SCENE           reduce using rule 2 (objects_definitions -> objects_definitions object_definition .)
    DEF             reduce using rule 2 (objects_definitions -> objects_definitions object_definition .)


state 6

    (4) object_definition -> DEF . ID { object_body }

    ID              shift and go to state 8


state 7

    (43) scene -> SCENE ( . INTEGER , INTEGER ) { BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest }

    INTEGER         shift and go to state 9


state 8

    (4) object_definition -> DEF ID . { object_body }

    {               shift and go to state 10


state 9

    (43) scene -> SCENE ( INTEGER . , INTEGER ) { BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest }

    ,               shift and go to state 11


state 10

    (4) object_definition -> DEF ID { . object_body }
    (5) object_body -> . default_color_definition ; declarations new_body_rest
    (6) default_color_definition -> . DEFAULT_COLOR ( expression , expression , expression )

    DEFAULT_COLOR   shift and go to state 13

    default_color_definition       shift and go to state 12
    object_body                    shift and go to state 14

state 11

    (43) scene -> SCENE ( INTEGER , . INTEGER ) { BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest }

    INTEGER         shift and go to state 15


state 12

    (5) object_body -> default_color_definition . ; declarations new_body_rest

    ;               shift and go to state 16


state 13

    (6) default_color_definition -> DEFAULT_COLOR . ( expression , expression , expression )

    (               shift and go to state 17


state 14

    (4) object_definition -> DEF ID { object_body . }

    }               shift and go to state 18


state 15

    (43) scene -> SCENE ( INTEGER , INTEGER . ) { BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest }

    )               shift and go to state 19


state 16

    (5) object_body -> default_color_definition ; . declarations new_body_rest
    (44) declarations -> . declaration ; declarations
    (45) declarations -> .
    (50) declaration -> . type declarators
    (46) type -> . int_type
    (47) type -> . float_type
    (48) int_type -> . INT_TYPE
    (49) float_type -> . FLOAT_TYPE

    ID              reduce using rule 45 (declarations -> .)
    IF              reduce using rule 45 (declarations -> .)
    WHILE           reduce using rule 45 (declarations -> .)
    COLOR           reduce using rule 45 (declarations -> .)
    RECTANGLE       reduce using rule 45 (declarations -> .)
    CIRCLE          reduce using rule 45 (declarations -> .)
    OVAL            reduce using rule 45 (declarations -> .)
    }               reduce using rule 45 (declarations -> .)
    INT_TYPE        shift and go to state 21
    FLOAT_TYPE      shift and go to state 20

    float_type                     shift and go to state 22
    declarations                   shift and go to state 23
    int_type                       shift and go to state 24
    declaration                    shift and go to state 25
    type                           shift and go to state 26

state 17

    (6) default_color_definition -> DEFAULT_COLOR ( . expression , expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 35
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 18

    (4) object_definition -> DEF ID { object_body } .

    SCENE           reduce using rule 4 (object_definition -> DEF ID { object_body } .)
    DEF             reduce using rule 4 (object_definition -> DEF ID { object_body } .)


state 19

    (43) scene -> SCENE ( INTEGER , INTEGER ) . { BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest }

    {               shift and go to state 38


state 20

    (49) float_type -> FLOAT_TYPE .

    ID              reduce using rule 49 (float_type -> FLOAT_TYPE .)


state 21

    (48) int_type -> INT_TYPE .

    ID              reduce using rule 48 (int_type -> INT_TYPE .)


state 22

    (47) type -> float_type .

    ID              reduce using rule 47 (type -> float_type .)


state 23

    (5) object_body -> default_color_definition ; declarations . new_body_rest
    (7) new_body_rest -> . blocks object_body_rest
    (8) new_body_rest -> . blocks
    (13) blocks -> . blocks block
    (14) blocks -> .

    ID              reduce using rule 14 (blocks -> .)
    IF              reduce using rule 14 (blocks -> .)
    WHILE           reduce using rule 14 (blocks -> .)
    COLOR           reduce using rule 14 (blocks -> .)
    RECTANGLE       reduce using rule 14 (blocks -> .)
    CIRCLE          reduce using rule 14 (blocks -> .)
    OVAL            reduce using rule 14 (blocks -> .)
    }               reduce using rule 14 (blocks -> .)

    blocks                         shift and go to state 39
    new_body_rest                  shift and go to state 40

state 24

    (46) type -> int_type .

    ID              reduce using rule 46 (type -> int_type .)


state 25

    (44) declarations -> declaration . ; declarations

    ;               shift and go to state 41


state 26

    (50) declaration -> type . declarators
    (51) declarators -> . declarator , declarators
    (52) declarators -> . declarator
    (53) declarator -> . declarator_of_id
    (54) declarator -> . assigment
    (55) declarator_of_id -> . ID
    (56) assigment -> . ID = expression

    ID              shift and go to state 46

    assigment                      shift and go to state 42
    declarators                    shift and go to state 43
    declarator_of_id               shift and go to state 44
    declarator                     shift and go to state 45

state 27

    (57) expression -> const_expr .

    ,               reduce using rule 57 (expression -> const_expr .)
    +               reduce using rule 57 (expression -> const_expr .)
    -               reduce using rule 57 (expression -> const_expr .)
    *               reduce using rule 57 (expression -> const_expr .)
    /               reduce using rule 57 (expression -> const_expr .)
    L               reduce using rule 57 (expression -> const_expr .)
    LE              reduce using rule 57 (expression -> const_expr .)
    G               reduce using rule 57 (expression -> const_expr .)
    GE              reduce using rule 57 (expression -> const_expr .)
    EQ              reduce using rule 57 (expression -> const_expr .)
    NE              reduce using rule 57 (expression -> const_expr .)
    )               reduce using rule 57 (expression -> const_expr .)
    ;               reduce using rule 57 (expression -> const_expr .)


state 28

    (76) expr_in_brackets -> ( . expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 47
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 29

    (59) expression -> two_arg_expr .

    ,               reduce using rule 59 (expression -> two_arg_expr .)
    +               reduce using rule 59 (expression -> two_arg_expr .)
    -               reduce using rule 59 (expression -> two_arg_expr .)
    *               reduce using rule 59 (expression -> two_arg_expr .)
    /               reduce using rule 59 (expression -> two_arg_expr .)
    L               reduce using rule 59 (expression -> two_arg_expr .)
    LE              reduce using rule 59 (expression -> two_arg_expr .)
    G               reduce using rule 59 (expression -> two_arg_expr .)
    GE              reduce using rule 59 (expression -> two_arg_expr .)
    EQ              reduce using rule 59 (expression -> two_arg_expr .)
    NE              reduce using rule 59 (expression -> two_arg_expr .)
    )               reduce using rule 59 (expression -> two_arg_expr .)
    ;               reduce using rule 59 (expression -> two_arg_expr .)


state 30

    (64) int_const_expr -> INTEGER .

    +               reduce using rule 64 (int_const_expr -> INTEGER .)
    -               reduce using rule 64 (int_const_expr -> INTEGER .)
    *               reduce using rule 64 (int_const_expr -> INTEGER .)
    /               reduce using rule 64 (int_const_expr -> INTEGER .)
    L               reduce using rule 64 (int_const_expr -> INTEGER .)
    LE              reduce using rule 64 (int_const_expr -> INTEGER .)
    G               reduce using rule 64 (int_const_expr -> INTEGER .)
    GE              reduce using rule 64 (int_const_expr -> INTEGER .)
    EQ              reduce using rule 64 (int_const_expr -> INTEGER .)
    NE              reduce using rule 64 (int_const_expr -> INTEGER .)
    ,               reduce using rule 64 (int_const_expr -> INTEGER .)
    )               reduce using rule 64 (int_const_expr -> INTEGER .)
    ;               reduce using rule 64 (int_const_expr -> INTEGER .)


state 31

    (61) const_expr -> int_const_expr .

    )               reduce using rule 61 (const_expr -> int_const_expr .)
    ,               reduce using rule 61 (const_expr -> int_const_expr .)
    +               reduce using rule 61 (const_expr -> int_const_expr .)
    -               reduce using rule 61 (const_expr -> int_const_expr .)
    *               reduce using rule 61 (const_expr -> int_const_expr .)
    /               reduce using rule 61 (const_expr -> int_const_expr .)
    L               reduce using rule 61 (const_expr -> int_const_expr .)
    LE              reduce using rule 61 (const_expr -> int_const_expr .)
    G               reduce using rule 61 (const_expr -> int_const_expr .)
    GE              reduce using rule 61 (const_expr -> int_const_expr .)
    EQ              reduce using rule 61 (const_expr -> int_const_expr .)
    NE              reduce using rule 61 (const_expr -> int_const_expr .)
    ;               reduce using rule 61 (const_expr -> int_const_expr .)


state 32

    (62) const_expr -> float_const_expr .

    )               reduce using rule 62 (const_expr -> float_const_expr .)
    ,               reduce using rule 62 (const_expr -> float_const_expr .)
    +               reduce using rule 62 (const_expr -> float_const_expr .)
    -               reduce using rule 62 (const_expr -> float_const_expr .)
    *               reduce using rule 62 (const_expr -> float_const_expr .)
    /               reduce using rule 62 (const_expr -> float_const_expr .)
    L               reduce using rule 62 (const_expr -> float_const_expr .)
    LE              reduce using rule 62 (const_expr -> float_const_expr .)
    G               reduce using rule 62 (const_expr -> float_const_expr .)
    GE              reduce using rule 62 (const_expr -> float_const_expr .)
    EQ              reduce using rule 62 (const_expr -> float_const_expr .)
    NE              reduce using rule 62 (const_expr -> float_const_expr .)
    ;               reduce using rule 62 (const_expr -> float_const_expr .)


state 33

    (65) id_expr -> ID .

    +               reduce using rule 65 (id_expr -> ID .)
    -               reduce using rule 65 (id_expr -> ID .)
    *               reduce using rule 65 (id_expr -> ID .)
    /               reduce using rule 65 (id_expr -> ID .)
    L               reduce using rule 65 (id_expr -> ID .)
    LE              reduce using rule 65 (id_expr -> ID .)
    G               reduce using rule 65 (id_expr -> ID .)
    GE              reduce using rule 65 (id_expr -> ID .)
    EQ              reduce using rule 65 (id_expr -> ID .)
    NE              reduce using rule 65 (id_expr -> ID .)
    ,               reduce using rule 65 (id_expr -> ID .)
    ;               reduce using rule 65 (id_expr -> ID .)
    )               reduce using rule 65 (id_expr -> ID .)


state 34

    (60) expression -> expr_in_brackets .

    ,               reduce using rule 60 (expression -> expr_in_brackets .)
    +               reduce using rule 60 (expression -> expr_in_brackets .)
    -               reduce using rule 60 (expression -> expr_in_brackets .)
    *               reduce using rule 60 (expression -> expr_in_brackets .)
    /               reduce using rule 60 (expression -> expr_in_brackets .)
    L               reduce using rule 60 (expression -> expr_in_brackets .)
    LE              reduce using rule 60 (expression -> expr_in_brackets .)
    G               reduce using rule 60 (expression -> expr_in_brackets .)
    GE              reduce using rule 60 (expression -> expr_in_brackets .)
    EQ              reduce using rule 60 (expression -> expr_in_brackets .)
    NE              reduce using rule 60 (expression -> expr_in_brackets .)
    )               reduce using rule 60 (expression -> expr_in_brackets .)
    ;               reduce using rule 60 (expression -> expr_in_brackets .)


state 35

    (6) default_color_definition -> DEFAULT_COLOR ( expression . , expression , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 55
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 36

    (63) float_const_expr -> FLOAT .

    +               reduce using rule 63 (float_const_expr -> FLOAT .)
    -               reduce using rule 63 (float_const_expr -> FLOAT .)
    *               reduce using rule 63 (float_const_expr -> FLOAT .)
    /               reduce using rule 63 (float_const_expr -> FLOAT .)
    L               reduce using rule 63 (float_const_expr -> FLOAT .)
    LE              reduce using rule 63 (float_const_expr -> FLOAT .)
    G               reduce using rule 63 (float_const_expr -> FLOAT .)
    GE              reduce using rule 63 (float_const_expr -> FLOAT .)
    EQ              reduce using rule 63 (float_const_expr -> FLOAT .)
    NE              reduce using rule 63 (float_const_expr -> FLOAT .)
    ,               reduce using rule 63 (float_const_expr -> FLOAT .)
    )               reduce using rule 63 (float_const_expr -> FLOAT .)
    ;               reduce using rule 63 (float_const_expr -> FLOAT .)


state 37

    (58) expression -> id_expr .

    ,               reduce using rule 58 (expression -> id_expr .)
    +               reduce using rule 58 (expression -> id_expr .)
    -               reduce using rule 58 (expression -> id_expr .)
    *               reduce using rule 58 (expression -> id_expr .)
    /               reduce using rule 58 (expression -> id_expr .)
    L               reduce using rule 58 (expression -> id_expr .)
    LE              reduce using rule 58 (expression -> id_expr .)
    G               reduce using rule 58 (expression -> id_expr .)
    GE              reduce using rule 58 (expression -> id_expr .)
    EQ              reduce using rule 58 (expression -> id_expr .)
    NE              reduce using rule 58 (expression -> id_expr .)
    )               reduce using rule 58 (expression -> id_expr .)
    ;               reduce using rule 58 (expression -> id_expr .)


state 38

    (43) scene -> SCENE ( INTEGER , INTEGER ) { . BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest }

    BACKGROUND      shift and go to state 59


state 39

    (7) new_body_rest -> blocks . object_body_rest
    (8) new_body_rest -> blocks .
    (13) blocks -> blocks . block
    (15) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (16) object_body_rest -> . shape_with_transformations blocks
    (17) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (18) object_body_rest -> . shape_without_transformations blocks
    (9) block -> . assigment ;
    (10) block -> . if_expr
    (11) block -> . while_expr
    (12) block -> . color_node ;
    (19) shape_with_transformations -> . shape ; transformation_nodes
    (20) shape_without_transformations -> . shape ;
    (56) assigment -> . ID = expression
    (77) if_expr -> . IF ( expression ) { new_body_rest }
    (78) if_expr -> . IF ( expression ) { new_body_rest } ELSE { new_body_rest }
    (79) while_expr -> . WHILE ( expression ) { new_body_rest }
    (29) color_node -> . COLOR ( expression , expression , expression )
    (32) shape -> . primitive
    (33) shape -> . usage
    (34) primitive -> . rectangle
    (35) primitive -> . circle
    (36) primitive -> . oval
    (42) usage -> . ID
    (37) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (38) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (39) circle -> . CIRCLE ( expression , expression , expression )
    (40) oval -> . OVAL ( expression , expression , expression , expression )
    (41) oval -> . OVAL ( expression , expression , expression , expression , expression )

    }               reduce using rule 8 (new_body_rest -> blocks .)
    ID              shift and go to state 72
    IF              shift and go to state 74
    WHILE           shift and go to state 76
    COLOR           shift and go to state 77
    RECTANGLE       shift and go to state 73
    CIRCLE          shift and go to state 71
    OVAL            shift and go to state 78

    if_expr                        shift and go to state 75
    assigment                      shift and go to state 66
    while_expr                     shift and go to state 70
    primitive                      shift and go to state 60
    shape_without_transformations  shift and go to state 61
    object_body_rest               shift and go to state 62
    shape                          shift and go to state 63
    shape_with_transformations     shift and go to state 67
    rectangle                      shift and go to state 69
    color_node                     shift and go to state 64
    usage                          shift and go to state 68
    circle                         shift and go to state 79
    oval                           shift and go to state 65
    block                          shift and go to state 80

state 40

    (5) object_body -> default_color_definition ; declarations new_body_rest .

    }               reduce using rule 5 (object_body -> default_color_definition ; declarations new_body_rest .)


state 41

    (44) declarations -> declaration ; . declarations
    (44) declarations -> . declaration ; declarations
    (45) declarations -> .
    (50) declaration -> . type declarators
    (46) type -> . int_type
    (47) type -> . float_type
    (48) int_type -> . INT_TYPE
    (49) float_type -> . FLOAT_TYPE

    ID              reduce using rule 45 (declarations -> .)
    IF              reduce using rule 45 (declarations -> .)
    WHILE           reduce using rule 45 (declarations -> .)
    COLOR           reduce using rule 45 (declarations -> .)
    RECTANGLE       reduce using rule 45 (declarations -> .)
    CIRCLE          reduce using rule 45 (declarations -> .)
    OVAL            reduce using rule 45 (declarations -> .)
    }               reduce using rule 45 (declarations -> .)
    INT_TYPE        shift and go to state 21
    FLOAT_TYPE      shift and go to state 20

    float_type                     shift and go to state 22
    declarations                   shift and go to state 81
    int_type                       shift and go to state 24
    declaration                    shift and go to state 25
    type                           shift and go to state 26

state 42

    (54) declarator -> assigment .

    ,               reduce using rule 54 (declarator -> assigment .)
    ;               reduce using rule 54 (declarator -> assigment .)


state 43

    (50) declaration -> type declarators .

    ;               reduce using rule 50 (declaration -> type declarators .)


state 44

    (53) declarator -> declarator_of_id .

    ,               reduce using rule 53 (declarator -> declarator_of_id .)
    ;               reduce using rule 53 (declarator -> declarator_of_id .)


state 45

    (51) declarators -> declarator . , declarators
    (52) declarators -> declarator .

    ,               shift and go to state 82
    ;               reduce using rule 52 (declarators -> declarator .)


state 46

    (55) declarator_of_id -> ID .
    (56) assigment -> ID . = expression

    ,               reduce using rule 55 (declarator_of_id -> ID .)
    ;               reduce using rule 55 (declarator_of_id -> ID .)
    =               shift and go to state 83


state 47

    (76) expr_in_brackets -> ( expression . )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 84
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 48

    (71) two_arg_expr -> expression LE . expression
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 85
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 49

    (74) two_arg_expr -> expression EQ . expression
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 86
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 50

    (75) two_arg_expr -> expression NE . expression
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 87
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 51

    (72) two_arg_expr -> expression G . expression
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 88
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 52

    (66) two_arg_expr -> expression + . expression
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 89
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 53

    (68) two_arg_expr -> expression * . expression
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 90
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 54

    (67) two_arg_expr -> expression - . expression
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 91
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 55

    (6) default_color_definition -> DEFAULT_COLOR ( expression , . expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 92
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 56

    (70) two_arg_expr -> expression L . expression
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 93
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 57

    (73) two_arg_expr -> expression GE . expression
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 94
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 58

    (69) two_arg_expr -> expression / . expression
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 95
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 59

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND . ( expression , expression , expression ) ; declarations new_body_rest }

    (               shift and go to state 96


state 60

    (32) shape -> primitive .

    ;               reduce using rule 32 (shape -> primitive .)


state 61

    (17) object_body_rest -> shape_without_transformations . blocks object_body_rest
    (18) object_body_rest -> shape_without_transformations . blocks
    (13) blocks -> . blocks block
    (14) blocks -> .

    ID              reduce using rule 14 (blocks -> .)
    IF              reduce using rule 14 (blocks -> .)
    WHILE           reduce using rule 14 (blocks -> .)
    COLOR           reduce using rule 14 (blocks -> .)
    RECTANGLE       reduce using rule 14 (blocks -> .)
    CIRCLE          reduce using rule 14 (blocks -> .)
    OVAL            reduce using rule 14 (blocks -> .)
    }               reduce using rule 14 (blocks -> .)

    blocks                         shift and go to state 97

state 62

    (7) new_body_rest -> blocks object_body_rest .

    }               reduce using rule 7 (new_body_rest -> blocks object_body_rest .)


state 63

    (19) shape_with_transformations -> shape . ; transformation_nodes
    (20) shape_without_transformations -> shape . ;

    ;               shift and go to state 98


state 64

    (12) block -> color_node . ;

    ;               shift and go to state 99


state 65

    (36) primitive -> oval .

    ;               reduce using rule 36 (primitive -> oval .)


state 66

    (9) block -> assigment . ;

    ;               shift and go to state 100


state 67

    (15) object_body_rest -> shape_with_transformations . blocks object_body_rest
    (16) object_body_rest -> shape_with_transformations . blocks
    (13) blocks -> . blocks block
    (14) blocks -> .

    ID              reduce using rule 14 (blocks -> .)
    IF              reduce using rule 14 (blocks -> .)
    WHILE           reduce using rule 14 (blocks -> .)
    COLOR           reduce using rule 14 (blocks -> .)
    RECTANGLE       reduce using rule 14 (blocks -> .)
    CIRCLE          reduce using rule 14 (blocks -> .)
    OVAL            reduce using rule 14 (blocks -> .)
    }               reduce using rule 14 (blocks -> .)

    blocks                         shift and go to state 101

state 68

    (33) shape -> usage .

    ;               reduce using rule 33 (shape -> usage .)


state 69

    (34) primitive -> rectangle .

    ;               reduce using rule 34 (primitive -> rectangle .)


state 70

    (11) block -> while_expr .

    ID              reduce using rule 11 (block -> while_expr .)
    IF              reduce using rule 11 (block -> while_expr .)
    WHILE           reduce using rule 11 (block -> while_expr .)
    COLOR           reduce using rule 11 (block -> while_expr .)
    RECTANGLE       reduce using rule 11 (block -> while_expr .)
    CIRCLE          reduce using rule 11 (block -> while_expr .)
    OVAL            reduce using rule 11 (block -> while_expr .)
    }               reduce using rule 11 (block -> while_expr .)


state 71

    (39) circle -> CIRCLE . ( expression , expression , expression )

    (               shift and go to state 102


state 72

    (56) assigment -> ID . = expression
    (42) usage -> ID .

    =               shift and go to state 83
    ;               reduce using rule 42 (usage -> ID .)


state 73

    (37) rectangle -> RECTANGLE . ( expression , expression , expression , expression )
    (38) rectangle -> RECTANGLE . ( expression , expression , expression , expression , expression )

    (               shift and go to state 103


state 74

    (77) if_expr -> IF . ( expression ) { new_body_rest }
    (78) if_expr -> IF . ( expression ) { new_body_rest } ELSE { new_body_rest }

    (               shift and go to state 104


state 75

    (10) block -> if_expr .

    ID              reduce using rule 10 (block -> if_expr .)
    IF              reduce using rule 10 (block -> if_expr .)
    WHILE           reduce using rule 10 (block -> if_expr .)
    COLOR           reduce using rule 10 (block -> if_expr .)
    RECTANGLE       reduce using rule 10 (block -> if_expr .)
    CIRCLE          reduce using rule 10 (block -> if_expr .)
    OVAL            reduce using rule 10 (block -> if_expr .)
    }               reduce using rule 10 (block -> if_expr .)


state 76

    (79) while_expr -> WHILE . ( expression ) { new_body_rest }

    (               shift and go to state 105


state 77

    (29) color_node -> COLOR . ( expression , expression , expression )

    (               shift and go to state 106


state 78

    (40) oval -> OVAL . ( expression , expression , expression , expression )
    (41) oval -> OVAL . ( expression , expression , expression , expression , expression )

    (               shift and go to state 107


state 79

    (35) primitive -> circle .

    ;               reduce using rule 35 (primitive -> circle .)


state 80

    (13) blocks -> blocks block .

    ID              reduce using rule 13 (blocks -> blocks block .)
    IF              reduce using rule 13 (blocks -> blocks block .)
    WHILE           reduce using rule 13 (blocks -> blocks block .)
    COLOR           reduce using rule 13 (blocks -> blocks block .)
    RECTANGLE       reduce using rule 13 (blocks -> blocks block .)
    CIRCLE          reduce using rule 13 (blocks -> blocks block .)
    OVAL            reduce using rule 13 (blocks -> blocks block .)
    }               reduce using rule 13 (blocks -> blocks block .)


state 81

    (44) declarations -> declaration ; declarations .

    }               reduce using rule 44 (declarations -> declaration ; declarations .)
    ID              reduce using rule 44 (declarations -> declaration ; declarations .)
    IF              reduce using rule 44 (declarations -> declaration ; declarations .)
    WHILE           reduce using rule 44 (declarations -> declaration ; declarations .)
    COLOR           reduce using rule 44 (declarations -> declaration ; declarations .)
    RECTANGLE       reduce using rule 44 (declarations -> declaration ; declarations .)
    CIRCLE          reduce using rule 44 (declarations -> declaration ; declarations .)
    OVAL            reduce using rule 44 (declarations -> declaration ; declarations .)


state 82

    (51) declarators -> declarator , . declarators
    (51) declarators -> . declarator , declarators
    (52) declarators -> . declarator
    (53) declarator -> . declarator_of_id
    (54) declarator -> . assigment
    (55) declarator_of_id -> . ID
    (56) assigment -> . ID = expression

    ID              shift and go to state 46

    declarators                    shift and go to state 108
    declarator_of_id               shift and go to state 44
    assigment                      shift and go to state 42
    declarator                     shift and go to state 45

state 83

    (56) assigment -> ID = . expression
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 109
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 84

    (76) expr_in_brackets -> ( expression ) .

    +               reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    -               reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    *               reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    /               reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    L               reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    LE              reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    G               reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    GE              reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    EQ              reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    NE              reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    ,               reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    ;               reduce using rule 76 (expr_in_brackets -> ( expression ) .)
    )               reduce using rule 76 (expr_in_brackets -> ( expression ) .)


state 85

    (71) two_arg_expr -> expression LE expression .
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 71 (two_arg_expr -> expression LE expression .)
    )               reduce using rule 71 (two_arg_expr -> expression LE expression .)
    ;               reduce using rule 71 (two_arg_expr -> expression LE expression .)
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50

  ! +               [ reduce using rule 71 (two_arg_expr -> expression LE expression .) ]
  ! -               [ reduce using rule 71 (two_arg_expr -> expression LE expression .) ]
  ! *               [ reduce using rule 71 (two_arg_expr -> expression LE expression .) ]
  ! /               [ reduce using rule 71 (two_arg_expr -> expression LE expression .) ]
  ! L               [ reduce using rule 71 (two_arg_expr -> expression LE expression .) ]
  ! LE              [ reduce using rule 71 (two_arg_expr -> expression LE expression .) ]
  ! G               [ reduce using rule 71 (two_arg_expr -> expression LE expression .) ]
  ! GE              [ reduce using rule 71 (two_arg_expr -> expression LE expression .) ]
  ! EQ              [ reduce using rule 71 (two_arg_expr -> expression LE expression .) ]
  ! NE              [ reduce using rule 71 (two_arg_expr -> expression LE expression .) ]


state 86

    (74) two_arg_expr -> expression EQ expression .
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 74 (two_arg_expr -> expression EQ expression .)
    )               reduce using rule 74 (two_arg_expr -> expression EQ expression .)
    ;               reduce using rule 74 (two_arg_expr -> expression EQ expression .)
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50

  ! +               [ reduce using rule 74 (two_arg_expr -> expression EQ expression .) ]
  ! -               [ reduce using rule 74 (two_arg_expr -> expression EQ expression .) ]
  ! *               [ reduce using rule 74 (two_arg_expr -> expression EQ expression .) ]
  ! /               [ reduce using rule 74 (two_arg_expr -> expression EQ expression .) ]
  ! L               [ reduce using rule 74 (two_arg_expr -> expression EQ expression .) ]
  ! LE              [ reduce using rule 74 (two_arg_expr -> expression EQ expression .) ]
  ! G               [ reduce using rule 74 (two_arg_expr -> expression EQ expression .) ]
  ! GE              [ reduce using rule 74 (two_arg_expr -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 74 (two_arg_expr -> expression EQ expression .) ]
  ! NE              [ reduce using rule 74 (two_arg_expr -> expression EQ expression .) ]


state 87

    (75) two_arg_expr -> expression NE expression .
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 75 (two_arg_expr -> expression NE expression .)
    )               reduce using rule 75 (two_arg_expr -> expression NE expression .)
    ;               reduce using rule 75 (two_arg_expr -> expression NE expression .)
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50

  ! +               [ reduce using rule 75 (two_arg_expr -> expression NE expression .) ]
  ! -               [ reduce using rule 75 (two_arg_expr -> expression NE expression .) ]
  ! *               [ reduce using rule 75 (two_arg_expr -> expression NE expression .) ]
  ! /               [ reduce using rule 75 (two_arg_expr -> expression NE expression .) ]
  ! L               [ reduce using rule 75 (two_arg_expr -> expression NE expression .) ]
  ! LE              [ reduce using rule 75 (two_arg_expr -> expression NE expression .) ]
  ! G               [ reduce using rule 75 (two_arg_expr -> expression NE expression .) ]
  ! GE              [ reduce using rule 75 (two_arg_expr -> expression NE expression .) ]
  ! EQ              [ reduce using rule 75 (two_arg_expr -> expression NE expression .) ]
  ! NE              [ reduce using rule 75 (two_arg_expr -> expression NE expression .) ]


state 88

    (72) two_arg_expr -> expression G expression .
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 72 (two_arg_expr -> expression G expression .)
    )               reduce using rule 72 (two_arg_expr -> expression G expression .)
    ;               reduce using rule 72 (two_arg_expr -> expression G expression .)
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50

  ! +               [ reduce using rule 72 (two_arg_expr -> expression G expression .) ]
  ! -               [ reduce using rule 72 (two_arg_expr -> expression G expression .) ]
  ! *               [ reduce using rule 72 (two_arg_expr -> expression G expression .) ]
  ! /               [ reduce using rule 72 (two_arg_expr -> expression G expression .) ]
  ! L               [ reduce using rule 72 (two_arg_expr -> expression G expression .) ]
  ! LE              [ reduce using rule 72 (two_arg_expr -> expression G expression .) ]
  ! G               [ reduce using rule 72 (two_arg_expr -> expression G expression .) ]
  ! GE              [ reduce using rule 72 (two_arg_expr -> expression G expression .) ]
  ! EQ              [ reduce using rule 72 (two_arg_expr -> expression G expression .) ]
  ! NE              [ reduce using rule 72 (two_arg_expr -> expression G expression .) ]


state 89

    (66) two_arg_expr -> expression + expression .
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               reduce using rule 66 (two_arg_expr -> expression + expression .)
    +               reduce using rule 66 (two_arg_expr -> expression + expression .)
    -               reduce using rule 66 (two_arg_expr -> expression + expression .)
    L               reduce using rule 66 (two_arg_expr -> expression + expression .)
    LE              reduce using rule 66 (two_arg_expr -> expression + expression .)
    G               reduce using rule 66 (two_arg_expr -> expression + expression .)
    GE              reduce using rule 66 (two_arg_expr -> expression + expression .)
    EQ              reduce using rule 66 (two_arg_expr -> expression + expression .)
    NE              reduce using rule 66 (two_arg_expr -> expression + expression .)
    )               reduce using rule 66 (two_arg_expr -> expression + expression .)
    ;               reduce using rule 66 (two_arg_expr -> expression + expression .)
    *               shift and go to state 53
    /               shift and go to state 58

  ! *               [ reduce using rule 66 (two_arg_expr -> expression + expression .) ]
  ! /               [ reduce using rule 66 (two_arg_expr -> expression + expression .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 54 ]
  ! L               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 48 ]
  ! G               [ shift and go to state 51 ]
  ! GE              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 90

    (68) two_arg_expr -> expression * expression .
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               reduce using rule 68 (two_arg_expr -> expression * expression .)
    +               reduce using rule 68 (two_arg_expr -> expression * expression .)
    -               reduce using rule 68 (two_arg_expr -> expression * expression .)
    *               reduce using rule 68 (two_arg_expr -> expression * expression .)
    /               reduce using rule 68 (two_arg_expr -> expression * expression .)
    L               reduce using rule 68 (two_arg_expr -> expression * expression .)
    LE              reduce using rule 68 (two_arg_expr -> expression * expression .)
    G               reduce using rule 68 (two_arg_expr -> expression * expression .)
    GE              reduce using rule 68 (two_arg_expr -> expression * expression .)
    EQ              reduce using rule 68 (two_arg_expr -> expression * expression .)
    NE              reduce using rule 68 (two_arg_expr -> expression * expression .)
    )               reduce using rule 68 (two_arg_expr -> expression * expression .)
    ;               reduce using rule 68 (two_arg_expr -> expression * expression .)

  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 54 ]
  ! *               [ shift and go to state 53 ]
  ! /               [ shift and go to state 58 ]
  ! L               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 48 ]
  ! G               [ shift and go to state 51 ]
  ! GE              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 91

    (67) two_arg_expr -> expression - expression .
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               reduce using rule 67 (two_arg_expr -> expression - expression .)
    +               reduce using rule 67 (two_arg_expr -> expression - expression .)
    -               reduce using rule 67 (two_arg_expr -> expression - expression .)
    L               reduce using rule 67 (two_arg_expr -> expression - expression .)
    LE              reduce using rule 67 (two_arg_expr -> expression - expression .)
    G               reduce using rule 67 (two_arg_expr -> expression - expression .)
    GE              reduce using rule 67 (two_arg_expr -> expression - expression .)
    EQ              reduce using rule 67 (two_arg_expr -> expression - expression .)
    NE              reduce using rule 67 (two_arg_expr -> expression - expression .)
    )               reduce using rule 67 (two_arg_expr -> expression - expression .)
    ;               reduce using rule 67 (two_arg_expr -> expression - expression .)
    *               shift and go to state 53
    /               shift and go to state 58

  ! *               [ reduce using rule 67 (two_arg_expr -> expression - expression .) ]
  ! /               [ reduce using rule 67 (two_arg_expr -> expression - expression .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 54 ]
  ! L               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 48 ]
  ! G               [ shift and go to state 51 ]
  ! GE              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 92

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression . , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 110
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 93

    (70) two_arg_expr -> expression L expression .
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 70 (two_arg_expr -> expression L expression .)
    )               reduce using rule 70 (two_arg_expr -> expression L expression .)
    ;               reduce using rule 70 (two_arg_expr -> expression L expression .)
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50

  ! +               [ reduce using rule 70 (two_arg_expr -> expression L expression .) ]
  ! -               [ reduce using rule 70 (two_arg_expr -> expression L expression .) ]
  ! *               [ reduce using rule 70 (two_arg_expr -> expression L expression .) ]
  ! /               [ reduce using rule 70 (two_arg_expr -> expression L expression .) ]
  ! L               [ reduce using rule 70 (two_arg_expr -> expression L expression .) ]
  ! LE              [ reduce using rule 70 (two_arg_expr -> expression L expression .) ]
  ! G               [ reduce using rule 70 (two_arg_expr -> expression L expression .) ]
  ! GE              [ reduce using rule 70 (two_arg_expr -> expression L expression .) ]
  ! EQ              [ reduce using rule 70 (two_arg_expr -> expression L expression .) ]
  ! NE              [ reduce using rule 70 (two_arg_expr -> expression L expression .) ]


state 94

    (73) two_arg_expr -> expression GE expression .
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 73 (two_arg_expr -> expression GE expression .)
    )               reduce using rule 73 (two_arg_expr -> expression GE expression .)
    ;               reduce using rule 73 (two_arg_expr -> expression GE expression .)
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50

  ! +               [ reduce using rule 73 (two_arg_expr -> expression GE expression .) ]
  ! -               [ reduce using rule 73 (two_arg_expr -> expression GE expression .) ]
  ! *               [ reduce using rule 73 (two_arg_expr -> expression GE expression .) ]
  ! /               [ reduce using rule 73 (two_arg_expr -> expression GE expression .) ]
  ! L               [ reduce using rule 73 (two_arg_expr -> expression GE expression .) ]
  ! LE              [ reduce using rule 73 (two_arg_expr -> expression GE expression .) ]
  ! G               [ reduce using rule 73 (two_arg_expr -> expression GE expression .) ]
  ! GE              [ reduce using rule 73 (two_arg_expr -> expression GE expression .) ]
  ! EQ              [ reduce using rule 73 (two_arg_expr -> expression GE expression .) ]
  ! NE              [ reduce using rule 73 (two_arg_expr -> expression GE expression .) ]


state 95

    (69) two_arg_expr -> expression / expression .
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               reduce using rule 69 (two_arg_expr -> expression / expression .)
    +               reduce using rule 69 (two_arg_expr -> expression / expression .)
    -               reduce using rule 69 (two_arg_expr -> expression / expression .)
    *               reduce using rule 69 (two_arg_expr -> expression / expression .)
    /               reduce using rule 69 (two_arg_expr -> expression / expression .)
    L               reduce using rule 69 (two_arg_expr -> expression / expression .)
    LE              reduce using rule 69 (two_arg_expr -> expression / expression .)
    G               reduce using rule 69 (two_arg_expr -> expression / expression .)
    GE              reduce using rule 69 (two_arg_expr -> expression / expression .)
    EQ              reduce using rule 69 (two_arg_expr -> expression / expression .)
    NE              reduce using rule 69 (two_arg_expr -> expression / expression .)
    )               reduce using rule 69 (two_arg_expr -> expression / expression .)
    ;               reduce using rule 69 (two_arg_expr -> expression / expression .)

  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 54 ]
  ! *               [ shift and go to state 53 ]
  ! /               [ shift and go to state 58 ]
  ! L               [ shift and go to state 56 ]
  ! LE              [ shift and go to state 48 ]
  ! G               [ shift and go to state 51 ]
  ! GE              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 96

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( . expression , expression , expression ) ; declarations new_body_rest }
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 111
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 97

    (17) object_body_rest -> shape_without_transformations blocks . object_body_rest
    (18) object_body_rest -> shape_without_transformations blocks .
    (13) blocks -> blocks . block
    (15) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (16) object_body_rest -> . shape_with_transformations blocks
    (17) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (18) object_body_rest -> . shape_without_transformations blocks
    (9) block -> . assigment ;
    (10) block -> . if_expr
    (11) block -> . while_expr
    (12) block -> . color_node ;
    (19) shape_with_transformations -> . shape ; transformation_nodes
    (20) shape_without_transformations -> . shape ;
    (56) assigment -> . ID = expression
    (77) if_expr -> . IF ( expression ) { new_body_rest }
    (78) if_expr -> . IF ( expression ) { new_body_rest } ELSE { new_body_rest }
    (79) while_expr -> . WHILE ( expression ) { new_body_rest }
    (29) color_node -> . COLOR ( expression , expression , expression )
    (32) shape -> . primitive
    (33) shape -> . usage
    (34) primitive -> . rectangle
    (35) primitive -> . circle
    (36) primitive -> . oval
    (42) usage -> . ID
    (37) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (38) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (39) circle -> . CIRCLE ( expression , expression , expression )
    (40) oval -> . OVAL ( expression , expression , expression , expression )
    (41) oval -> . OVAL ( expression , expression , expression , expression , expression )

    }               reduce using rule 18 (object_body_rest -> shape_without_transformations blocks .)
    ID              shift and go to state 72
    IF              shift and go to state 74
    WHILE           shift and go to state 76
    COLOR           shift and go to state 77
    RECTANGLE       shift and go to state 73
    CIRCLE          shift and go to state 71
    OVAL            shift and go to state 78

    if_expr                        shift and go to state 75
    assigment                      shift and go to state 66
    while_expr                     shift and go to state 70
    primitive                      shift and go to state 60
    shape_without_transformations  shift and go to state 61
    object_body_rest               shift and go to state 112
    shape                          shift and go to state 63
    shape_with_transformations     shift and go to state 67
    rectangle                      shift and go to state 69
    color_node                     shift and go to state 64
    usage                          shift and go to state 68
    circle                         shift and go to state 79
    oval                           shift and go to state 65
    block                          shift and go to state 80

state 98

    (19) shape_with_transformations -> shape ; . transformation_nodes
    (20) shape_without_transformations -> shape ; .
    (21) transformation_nodes -> . transformation_node ; transformation_nodes
    (22) transformation_nodes -> . transformation_node ;
    (23) transformation_node -> . rotate_node
    (24) transformation_node -> . translation_node
    (25) transformation_node -> . scale_node
    (26) transformation_node -> . color_node
    (27) rotate_node -> . ROTATE ( expression )
    (28) translation_node -> . TRANSLATE ( expression , expression )
    (30) scale_node -> . SCALE ( expression )
    (31) scale_node -> . SCALE ( expression , expression )
    (29) color_node -> . COLOR ( expression , expression , expression )

  ! shift/reduce conflict for COLOR resolved as shift
    ID              reduce using rule 20 (shape_without_transformations -> shape ; .)
    IF              reduce using rule 20 (shape_without_transformations -> shape ; .)
    WHILE           reduce using rule 20 (shape_without_transformations -> shape ; .)
    RECTANGLE       reduce using rule 20 (shape_without_transformations -> shape ; .)
    CIRCLE          reduce using rule 20 (shape_without_transformations -> shape ; .)
    OVAL            reduce using rule 20 (shape_without_transformations -> shape ; .)
    }               reduce using rule 20 (shape_without_transformations -> shape ; .)
    ROTATE          shift and go to state 113
    TRANSLATE       shift and go to state 120
    SCALE           shift and go to state 117
    COLOR           shift and go to state 77

  ! COLOR           [ reduce using rule 20 (shape_without_transformations -> shape ; .) ]

    scale_node                     shift and go to state 114
    transformation_nodes           shift and go to state 115
    translation_node               shift and go to state 116
    color_node                     shift and go to state 118
    transformation_node            shift and go to state 119
    rotate_node                    shift and go to state 121

state 99

    (12) block -> color_node ; .

    ID              reduce using rule 12 (block -> color_node ; .)
    IF              reduce using rule 12 (block -> color_node ; .)
    WHILE           reduce using rule 12 (block -> color_node ; .)
    COLOR           reduce using rule 12 (block -> color_node ; .)
    RECTANGLE       reduce using rule 12 (block -> color_node ; .)
    CIRCLE          reduce using rule 12 (block -> color_node ; .)
    OVAL            reduce using rule 12 (block -> color_node ; .)
    }               reduce using rule 12 (block -> color_node ; .)


state 100

    (9) block -> assigment ; .

    ID              reduce using rule 9 (block -> assigment ; .)
    IF              reduce using rule 9 (block -> assigment ; .)
    WHILE           reduce using rule 9 (block -> assigment ; .)
    COLOR           reduce using rule 9 (block -> assigment ; .)
    RECTANGLE       reduce using rule 9 (block -> assigment ; .)
    CIRCLE          reduce using rule 9 (block -> assigment ; .)
    OVAL            reduce using rule 9 (block -> assigment ; .)
    }               reduce using rule 9 (block -> assigment ; .)


state 101

    (15) object_body_rest -> shape_with_transformations blocks . object_body_rest
    (16) object_body_rest -> shape_with_transformations blocks .
    (13) blocks -> blocks . block
    (15) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (16) object_body_rest -> . shape_with_transformations blocks
    (17) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (18) object_body_rest -> . shape_without_transformations blocks
    (9) block -> . assigment ;
    (10) block -> . if_expr
    (11) block -> . while_expr
    (12) block -> . color_node ;
    (19) shape_with_transformations -> . shape ; transformation_nodes
    (20) shape_without_transformations -> . shape ;
    (56) assigment -> . ID = expression
    (77) if_expr -> . IF ( expression ) { new_body_rest }
    (78) if_expr -> . IF ( expression ) { new_body_rest } ELSE { new_body_rest }
    (79) while_expr -> . WHILE ( expression ) { new_body_rest }
    (29) color_node -> . COLOR ( expression , expression , expression )
    (32) shape -> . primitive
    (33) shape -> . usage
    (34) primitive -> . rectangle
    (35) primitive -> . circle
    (36) primitive -> . oval
    (42) usage -> . ID
    (37) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (38) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (39) circle -> . CIRCLE ( expression , expression , expression )
    (40) oval -> . OVAL ( expression , expression , expression , expression )
    (41) oval -> . OVAL ( expression , expression , expression , expression , expression )

    }               reduce using rule 16 (object_body_rest -> shape_with_transformations blocks .)
    ID              shift and go to state 72
    IF              shift and go to state 74
    WHILE           shift and go to state 76
    COLOR           shift and go to state 77
    RECTANGLE       shift and go to state 73
    CIRCLE          shift and go to state 71
    OVAL            shift and go to state 78

    if_expr                        shift and go to state 75
    assigment                      shift and go to state 66
    while_expr                     shift and go to state 70
    primitive                      shift and go to state 60
    shape_without_transformations  shift and go to state 61
    object_body_rest               shift and go to state 122
    shape                          shift and go to state 63
    shape_with_transformations     shift and go to state 67
    rectangle                      shift and go to state 69
    color_node                     shift and go to state 64
    usage                          shift and go to state 68
    circle                         shift and go to state 79
    oval                           shift and go to state 65
    block                          shift and go to state 80

state 102

    (39) circle -> CIRCLE ( . expression , expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 123
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 103

    (37) rectangle -> RECTANGLE ( . expression , expression , expression , expression )
    (38) rectangle -> RECTANGLE ( . expression , expression , expression , expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 124
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 104

    (77) if_expr -> IF ( . expression ) { new_body_rest }
    (78) if_expr -> IF ( . expression ) { new_body_rest } ELSE { new_body_rest }
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 125
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 105

    (79) while_expr -> WHILE ( . expression ) { new_body_rest }
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 126
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 106

    (29) color_node -> COLOR ( . expression , expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 127
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 107

    (40) oval -> OVAL ( . expression , expression , expression , expression )
    (41) oval -> OVAL ( . expression , expression , expression , expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 128
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 108

    (51) declarators -> declarator , declarators .

    ;               reduce using rule 51 (declarators -> declarator , declarators .)


state 109

    (56) assigment -> ID = expression .
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               reduce using rule 56 (assigment -> ID = expression .)
    ;               reduce using rule 56 (assigment -> ID = expression .)
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 110

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression , . expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 129
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 111

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression . , expression , expression ) ; declarations new_body_rest }
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 130
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 112

    (17) object_body_rest -> shape_without_transformations blocks object_body_rest .

    }               reduce using rule 17 (object_body_rest -> shape_without_transformations blocks object_body_rest .)


state 113

    (27) rotate_node -> ROTATE . ( expression )

    (               shift and go to state 131


state 114

    (25) transformation_node -> scale_node .

    ;               reduce using rule 25 (transformation_node -> scale_node .)


state 115

    (19) shape_with_transformations -> shape ; transformation_nodes .

    ID              reduce using rule 19 (shape_with_transformations -> shape ; transformation_nodes .)
    IF              reduce using rule 19 (shape_with_transformations -> shape ; transformation_nodes .)
    WHILE           reduce using rule 19 (shape_with_transformations -> shape ; transformation_nodes .)
    COLOR           reduce using rule 19 (shape_with_transformations -> shape ; transformation_nodes .)
    RECTANGLE       reduce using rule 19 (shape_with_transformations -> shape ; transformation_nodes .)
    CIRCLE          reduce using rule 19 (shape_with_transformations -> shape ; transformation_nodes .)
    OVAL            reduce using rule 19 (shape_with_transformations -> shape ; transformation_nodes .)
    }               reduce using rule 19 (shape_with_transformations -> shape ; transformation_nodes .)


state 116

    (24) transformation_node -> translation_node .

    ;               reduce using rule 24 (transformation_node -> translation_node .)


state 117

    (30) scale_node -> SCALE . ( expression )
    (31) scale_node -> SCALE . ( expression , expression )

    (               shift and go to state 132


state 118

    (26) transformation_node -> color_node .

    ;               reduce using rule 26 (transformation_node -> color_node .)


state 119

    (21) transformation_nodes -> transformation_node . ; transformation_nodes
    (22) transformation_nodes -> transformation_node . ;

    ;               shift and go to state 133


state 120

    (28) translation_node -> TRANSLATE . ( expression , expression )

    (               shift and go to state 134


state 121

    (23) transformation_node -> rotate_node .

    ;               reduce using rule 23 (transformation_node -> rotate_node .)


state 122

    (15) object_body_rest -> shape_with_transformations blocks object_body_rest .

    }               reduce using rule 15 (object_body_rest -> shape_with_transformations blocks object_body_rest .)


state 123

    (39) circle -> CIRCLE ( expression . , expression , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 135
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 124

    (37) rectangle -> RECTANGLE ( expression . , expression , expression , expression )
    (38) rectangle -> RECTANGLE ( expression . , expression , expression , expression , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 136
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 125

    (77) if_expr -> IF ( expression . ) { new_body_rest }
    (78) if_expr -> IF ( expression . ) { new_body_rest } ELSE { new_body_rest }
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 137
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 126

    (79) while_expr -> WHILE ( expression . ) { new_body_rest }
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 138
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 127

    (29) color_node -> COLOR ( expression . , expression , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 139
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 128

    (40) oval -> OVAL ( expression . , expression , expression , expression )
    (41) oval -> OVAL ( expression . , expression , expression , expression , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 140
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 129

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression , expression . )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 141
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 130

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , . expression , expression ) ; declarations new_body_rest }
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 142
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 131

    (27) rotate_node -> ROTATE ( . expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 143
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 132

    (30) scale_node -> SCALE ( . expression )
    (31) scale_node -> SCALE ( . expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 144
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 133

    (21) transformation_nodes -> transformation_node ; . transformation_nodes
    (22) transformation_nodes -> transformation_node ; .
    (21) transformation_nodes -> . transformation_node ; transformation_nodes
    (22) transformation_nodes -> . transformation_node ;
    (23) transformation_node -> . rotate_node
    (24) transformation_node -> . translation_node
    (25) transformation_node -> . scale_node
    (26) transformation_node -> . color_node
    (27) rotate_node -> . ROTATE ( expression )
    (28) translation_node -> . TRANSLATE ( expression , expression )
    (30) scale_node -> . SCALE ( expression )
    (31) scale_node -> . SCALE ( expression , expression )
    (29) color_node -> . COLOR ( expression , expression , expression )

  ! shift/reduce conflict for COLOR resolved as shift
    ID              reduce using rule 22 (transformation_nodes -> transformation_node ; .)
    IF              reduce using rule 22 (transformation_nodes -> transformation_node ; .)
    WHILE           reduce using rule 22 (transformation_nodes -> transformation_node ; .)
    RECTANGLE       reduce using rule 22 (transformation_nodes -> transformation_node ; .)
    CIRCLE          reduce using rule 22 (transformation_nodes -> transformation_node ; .)
    OVAL            reduce using rule 22 (transformation_nodes -> transformation_node ; .)
    }               reduce using rule 22 (transformation_nodes -> transformation_node ; .)
    ROTATE          shift and go to state 113
    TRANSLATE       shift and go to state 120
    SCALE           shift and go to state 117
    COLOR           shift and go to state 77

  ! COLOR           [ reduce using rule 22 (transformation_nodes -> transformation_node ; .) ]

    scale_node                     shift and go to state 114
    transformation_node            shift and go to state 119
    translation_node               shift and go to state 116
    color_node                     shift and go to state 118
    transformation_nodes           shift and go to state 145
    rotate_node                    shift and go to state 121

state 134

    (28) translation_node -> TRANSLATE ( . expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 146
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 135

    (39) circle -> CIRCLE ( expression , . expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 147
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 136

    (37) rectangle -> RECTANGLE ( expression , . expression , expression , expression )
    (38) rectangle -> RECTANGLE ( expression , . expression , expression , expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 148
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 137

    (77) if_expr -> IF ( expression ) . { new_body_rest }
    (78) if_expr -> IF ( expression ) . { new_body_rest } ELSE { new_body_rest }

    {               shift and go to state 149


state 138

    (79) while_expr -> WHILE ( expression ) . { new_body_rest }

    {               shift and go to state 150


state 139

    (29) color_node -> COLOR ( expression , . expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 151
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 140

    (40) oval -> OVAL ( expression , . expression , expression , expression )
    (41) oval -> OVAL ( expression , . expression , expression , expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 152
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 141

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression , expression ) .

    ;               reduce using rule 6 (default_color_definition -> DEFAULT_COLOR ( expression , expression , expression ) .)


state 142

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression . , expression ) ; declarations new_body_rest }
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 153
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 143

    (27) rotate_node -> ROTATE ( expression . )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 154
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 144

    (30) scale_node -> SCALE ( expression . )
    (31) scale_node -> SCALE ( expression . , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 155
    ,               shift and go to state 156
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 145

    (21) transformation_nodes -> transformation_node ; transformation_nodes .

    ID              reduce using rule 21 (transformation_nodes -> transformation_node ; transformation_nodes .)
    IF              reduce using rule 21 (transformation_nodes -> transformation_node ; transformation_nodes .)
    WHILE           reduce using rule 21 (transformation_nodes -> transformation_node ; transformation_nodes .)
    COLOR           reduce using rule 21 (transformation_nodes -> transformation_node ; transformation_nodes .)
    RECTANGLE       reduce using rule 21 (transformation_nodes -> transformation_node ; transformation_nodes .)
    CIRCLE          reduce using rule 21 (transformation_nodes -> transformation_node ; transformation_nodes .)
    OVAL            reduce using rule 21 (transformation_nodes -> transformation_node ; transformation_nodes .)
    }               reduce using rule 21 (transformation_nodes -> transformation_node ; transformation_nodes .)


state 146

    (28) translation_node -> TRANSLATE ( expression . , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 157
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 147

    (39) circle -> CIRCLE ( expression , expression . , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 158
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 148

    (37) rectangle -> RECTANGLE ( expression , expression . , expression , expression )
    (38) rectangle -> RECTANGLE ( expression , expression . , expression , expression , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 159
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 149

    (77) if_expr -> IF ( expression ) { . new_body_rest }
    (78) if_expr -> IF ( expression ) { . new_body_rest } ELSE { new_body_rest }
    (7) new_body_rest -> . blocks object_body_rest
    (8) new_body_rest -> . blocks
    (13) blocks -> . blocks block
    (14) blocks -> .

    ID              reduce using rule 14 (blocks -> .)
    IF              reduce using rule 14 (blocks -> .)
    WHILE           reduce using rule 14 (blocks -> .)
    COLOR           reduce using rule 14 (blocks -> .)
    RECTANGLE       reduce using rule 14 (blocks -> .)
    CIRCLE          reduce using rule 14 (blocks -> .)
    OVAL            reduce using rule 14 (blocks -> .)
    }               reduce using rule 14 (blocks -> .)

    blocks                         shift and go to state 39
    new_body_rest                  shift and go to state 160

state 150

    (79) while_expr -> WHILE ( expression ) { . new_body_rest }
    (7) new_body_rest -> . blocks object_body_rest
    (8) new_body_rest -> . blocks
    (13) blocks -> . blocks block
    (14) blocks -> .

    ID              reduce using rule 14 (blocks -> .)
    IF              reduce using rule 14 (blocks -> .)
    WHILE           reduce using rule 14 (blocks -> .)
    COLOR           reduce using rule 14 (blocks -> .)
    RECTANGLE       reduce using rule 14 (blocks -> .)
    CIRCLE          reduce using rule 14 (blocks -> .)
    OVAL            reduce using rule 14 (blocks -> .)
    }               reduce using rule 14 (blocks -> .)

    blocks                         shift and go to state 39
    new_body_rest                  shift and go to state 161

state 151

    (29) color_node -> COLOR ( expression , expression . , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 162
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 152

    (40) oval -> OVAL ( expression , expression . , expression , expression )
    (41) oval -> OVAL ( expression , expression . , expression , expression , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 163
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 153

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression , . expression ) ; declarations new_body_rest }
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 164
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 154

    (27) rotate_node -> ROTATE ( expression ) .

    ;               reduce using rule 27 (rotate_node -> ROTATE ( expression ) .)


state 155

    (30) scale_node -> SCALE ( expression ) .

    ;               reduce using rule 30 (scale_node -> SCALE ( expression ) .)


state 156

    (31) scale_node -> SCALE ( expression , . expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 165
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 157

    (28) translation_node -> TRANSLATE ( expression , . expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 166
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 158

    (39) circle -> CIRCLE ( expression , expression , . expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 167
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 159

    (37) rectangle -> RECTANGLE ( expression , expression , . expression , expression )
    (38) rectangle -> RECTANGLE ( expression , expression , . expression , expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 168
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 160

    (77) if_expr -> IF ( expression ) { new_body_rest . }
    (78) if_expr -> IF ( expression ) { new_body_rest . } ELSE { new_body_rest }

    }               shift and go to state 169


state 161

    (79) while_expr -> WHILE ( expression ) { new_body_rest . }

    }               shift and go to state 170


state 162

    (29) color_node -> COLOR ( expression , expression , . expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 171
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 163

    (40) oval -> OVAL ( expression , expression , . expression , expression )
    (41) oval -> OVAL ( expression , expression , . expression , expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 172
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 164

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression , expression . ) ; declarations new_body_rest }
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 173
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 165

    (31) scale_node -> SCALE ( expression , expression . )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 174
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 166

    (28) translation_node -> TRANSLATE ( expression , expression . )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 175
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 167

    (39) circle -> CIRCLE ( expression , expression , expression . )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 176
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 168

    (37) rectangle -> RECTANGLE ( expression , expression , expression . , expression )
    (38) rectangle -> RECTANGLE ( expression , expression , expression . , expression , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 177
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 169

    (77) if_expr -> IF ( expression ) { new_body_rest } .
    (78) if_expr -> IF ( expression ) { new_body_rest } . ELSE { new_body_rest }

    ID              reduce using rule 77 (if_expr -> IF ( expression ) { new_body_rest } .)
    IF              reduce using rule 77 (if_expr -> IF ( expression ) { new_body_rest } .)
    WHILE           reduce using rule 77 (if_expr -> IF ( expression ) { new_body_rest } .)
    COLOR           reduce using rule 77 (if_expr -> IF ( expression ) { new_body_rest } .)
    RECTANGLE       reduce using rule 77 (if_expr -> IF ( expression ) { new_body_rest } .)
    CIRCLE          reduce using rule 77 (if_expr -> IF ( expression ) { new_body_rest } .)
    OVAL            reduce using rule 77 (if_expr -> IF ( expression ) { new_body_rest } .)
    }               reduce using rule 77 (if_expr -> IF ( expression ) { new_body_rest } .)
    ELSE            shift and go to state 178


state 170

    (79) while_expr -> WHILE ( expression ) { new_body_rest } .

    ID              reduce using rule 79 (while_expr -> WHILE ( expression ) { new_body_rest } .)
    IF              reduce using rule 79 (while_expr -> WHILE ( expression ) { new_body_rest } .)
    WHILE           reduce using rule 79 (while_expr -> WHILE ( expression ) { new_body_rest } .)
    COLOR           reduce using rule 79 (while_expr -> WHILE ( expression ) { new_body_rest } .)
    RECTANGLE       reduce using rule 79 (while_expr -> WHILE ( expression ) { new_body_rest } .)
    CIRCLE          reduce using rule 79 (while_expr -> WHILE ( expression ) { new_body_rest } .)
    OVAL            reduce using rule 79 (while_expr -> WHILE ( expression ) { new_body_rest } .)
    }               reduce using rule 79 (while_expr -> WHILE ( expression ) { new_body_rest } .)


state 171

    (29) color_node -> COLOR ( expression , expression , expression . )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 179
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 172

    (40) oval -> OVAL ( expression , expression , expression . , expression )
    (41) oval -> OVAL ( expression , expression , expression . , expression , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    ,               shift and go to state 180
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 173

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression , expression ) . ; declarations new_body_rest }

    ;               shift and go to state 181


state 174

    (31) scale_node -> SCALE ( expression , expression ) .

    ;               reduce using rule 31 (scale_node -> SCALE ( expression , expression ) .)


state 175

    (28) translation_node -> TRANSLATE ( expression , expression ) .

    ;               reduce using rule 28 (translation_node -> TRANSLATE ( expression , expression ) .)


state 176

    (39) circle -> CIRCLE ( expression , expression , expression ) .

    ;               reduce using rule 39 (circle -> CIRCLE ( expression , expression , expression ) .)


state 177

    (37) rectangle -> RECTANGLE ( expression , expression , expression , . expression )
    (38) rectangle -> RECTANGLE ( expression , expression , expression , . expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 182
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 178

    (78) if_expr -> IF ( expression ) { new_body_rest } ELSE . { new_body_rest }

    {               shift and go to state 183


state 179

    (29) color_node -> COLOR ( expression , expression , expression ) .

    ;               reduce using rule 29 (color_node -> COLOR ( expression , expression , expression ) .)


state 180

    (40) oval -> OVAL ( expression , expression , expression , . expression )
    (41) oval -> OVAL ( expression , expression , expression , . expression , expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 184
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 181

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression , expression ) ; . declarations new_body_rest }
    (44) declarations -> . declaration ; declarations
    (45) declarations -> .
    (50) declaration -> . type declarators
    (46) type -> . int_type
    (47) type -> . float_type
    (48) int_type -> . INT_TYPE
    (49) float_type -> . FLOAT_TYPE

    }               reduce using rule 45 (declarations -> .)
    ID              reduce using rule 45 (declarations -> .)
    IF              reduce using rule 45 (declarations -> .)
    WHILE           reduce using rule 45 (declarations -> .)
    COLOR           reduce using rule 45 (declarations -> .)
    RECTANGLE       reduce using rule 45 (declarations -> .)
    CIRCLE          reduce using rule 45 (declarations -> .)
    OVAL            reduce using rule 45 (declarations -> .)
    INT_TYPE        shift and go to state 21
    FLOAT_TYPE      shift and go to state 20

    float_type                     shift and go to state 22
    declarations                   shift and go to state 185
    int_type                       shift and go to state 24
    declaration                    shift and go to state 25
    type                           shift and go to state 26

state 182

    (37) rectangle -> RECTANGLE ( expression , expression , expression , expression . )
    (38) rectangle -> RECTANGLE ( expression , expression , expression , expression . , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 186
    ,               shift and go to state 187
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 183

    (78) if_expr -> IF ( expression ) { new_body_rest } ELSE { . new_body_rest }
    (7) new_body_rest -> . blocks object_body_rest
    (8) new_body_rest -> . blocks
    (13) blocks -> . blocks block
    (14) blocks -> .

    ID              reduce using rule 14 (blocks -> .)
    IF              reduce using rule 14 (blocks -> .)
    WHILE           reduce using rule 14 (blocks -> .)
    COLOR           reduce using rule 14 (blocks -> .)
    RECTANGLE       reduce using rule 14 (blocks -> .)
    CIRCLE          reduce using rule 14 (blocks -> .)
    OVAL            reduce using rule 14 (blocks -> .)
    }               reduce using rule 14 (blocks -> .)

    blocks                         shift and go to state 39
    new_body_rest                  shift and go to state 188

state 184

    (40) oval -> OVAL ( expression , expression , expression , expression . )
    (41) oval -> OVAL ( expression , expression , expression , expression . , expression )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 189
    ,               shift and go to state 190
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 185

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression , expression ) ; declarations . new_body_rest }
    (7) new_body_rest -> . blocks object_body_rest
    (8) new_body_rest -> . blocks
    (13) blocks -> . blocks block
    (14) blocks -> .

    ID              reduce using rule 14 (blocks -> .)
    IF              reduce using rule 14 (blocks -> .)
    WHILE           reduce using rule 14 (blocks -> .)
    COLOR           reduce using rule 14 (blocks -> .)
    RECTANGLE       reduce using rule 14 (blocks -> .)
    CIRCLE          reduce using rule 14 (blocks -> .)
    OVAL            reduce using rule 14 (blocks -> .)
    }               reduce using rule 14 (blocks -> .)

    blocks                         shift and go to state 39
    new_body_rest                  shift and go to state 191

state 186

    (37) rectangle -> RECTANGLE ( expression , expression , expression , expression ) .

    ;               reduce using rule 37 (rectangle -> RECTANGLE ( expression , expression , expression , expression ) .)


state 187

    (38) rectangle -> RECTANGLE ( expression , expression , expression , expression , . expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 192
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 188

    (78) if_expr -> IF ( expression ) { new_body_rest } ELSE { new_body_rest . }

    }               shift and go to state 193


state 189

    (40) oval -> OVAL ( expression , expression , expression , expression ) .

    ;               reduce using rule 40 (oval -> OVAL ( expression , expression , expression , expression ) .)


state 190

    (41) oval -> OVAL ( expression , expression , expression , expression , . expression )
    (57) expression -> . const_expr
    (58) expression -> . id_expr
    (59) expression -> . two_arg_expr
    (60) expression -> . expr_in_brackets
    (61) const_expr -> . int_const_expr
    (62) const_expr -> . float_const_expr
    (65) id_expr -> . ID
    (66) two_arg_expr -> . expression + expression
    (67) two_arg_expr -> . expression - expression
    (68) two_arg_expr -> . expression * expression
    (69) two_arg_expr -> . expression / expression
    (70) two_arg_expr -> . expression L expression
    (71) two_arg_expr -> . expression LE expression
    (72) two_arg_expr -> . expression G expression
    (73) two_arg_expr -> . expression GE expression
    (74) two_arg_expr -> . expression EQ expression
    (75) two_arg_expr -> . expression NE expression
    (76) expr_in_brackets -> . ( expression )
    (64) int_const_expr -> . INTEGER
    (63) float_const_expr -> . FLOAT

    ID              shift and go to state 33
    (               shift and go to state 28
    INTEGER         shift and go to state 30
    FLOAT           shift and go to state 36

    int_const_expr                 shift and go to state 31
    float_const_expr               shift and go to state 32
    expr_in_brackets               shift and go to state 34
    expression                     shift and go to state 194
    const_expr                     shift and go to state 27
    two_arg_expr                   shift and go to state 29
    id_expr                        shift and go to state 37

state 191

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest . }

    }               shift and go to state 195


state 192

    (38) rectangle -> RECTANGLE ( expression , expression , expression , expression , expression . )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 196
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 193

    (78) if_expr -> IF ( expression ) { new_body_rest } ELSE { new_body_rest } .

    ID              reduce using rule 78 (if_expr -> IF ( expression ) { new_body_rest } ELSE { new_body_rest } .)
    IF              reduce using rule 78 (if_expr -> IF ( expression ) { new_body_rest } ELSE { new_body_rest } .)
    WHILE           reduce using rule 78 (if_expr -> IF ( expression ) { new_body_rest } ELSE { new_body_rest } .)
    COLOR           reduce using rule 78 (if_expr -> IF ( expression ) { new_body_rest } ELSE { new_body_rest } .)
    RECTANGLE       reduce using rule 78 (if_expr -> IF ( expression ) { new_body_rest } ELSE { new_body_rest } .)
    CIRCLE          reduce using rule 78 (if_expr -> IF ( expression ) { new_body_rest } ELSE { new_body_rest } .)
    OVAL            reduce using rule 78 (if_expr -> IF ( expression ) { new_body_rest } ELSE { new_body_rest } .)
    }               reduce using rule 78 (if_expr -> IF ( expression ) { new_body_rest } ELSE { new_body_rest } .)


state 194

    (41) oval -> OVAL ( expression , expression , expression , expression , expression . )
    (66) two_arg_expr -> expression . + expression
    (67) two_arg_expr -> expression . - expression
    (68) two_arg_expr -> expression . * expression
    (69) two_arg_expr -> expression . / expression
    (70) two_arg_expr -> expression . L expression
    (71) two_arg_expr -> expression . LE expression
    (72) two_arg_expr -> expression . G expression
    (73) two_arg_expr -> expression . GE expression
    (74) two_arg_expr -> expression . EQ expression
    (75) two_arg_expr -> expression . NE expression

    )               shift and go to state 197
    +               shift and go to state 52
    -               shift and go to state 54
    *               shift and go to state 53
    /               shift and go to state 58
    L               shift and go to state 56
    LE              shift and go to state 48
    G               shift and go to state 51
    GE              shift and go to state 57
    EQ              shift and go to state 49
    NE              shift and go to state 50


state 195

    (43) scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest } .

    $end            reduce using rule 43 (scene -> SCENE ( INTEGER , INTEGER ) { BACKGROUND ( expression , expression , expression ) ; declarations new_body_rest } .)


state 196

    (38) rectangle -> RECTANGLE ( expression , expression , expression , expression , expression ) .

    ;               reduce using rule 38 (rectangle -> RECTANGLE ( expression , expression , expression , expression , expression ) .)


state 197

    (41) oval -> OVAL ( expression , expression , expression , expression , expression ) .

    ;               reduce using rule 41 (oval -> OVAL ( expression , expression , expression , expression , expression ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 85 resolved as shift
WARNING: shift/reduce conflict for - in state 85 resolved as shift
WARNING: shift/reduce conflict for * in state 85 resolved as shift
WARNING: shift/reduce conflict for / in state 85 resolved as shift
WARNING: shift/reduce conflict for L in state 85 resolved as shift
WARNING: shift/reduce conflict for LE in state 85 resolved as shift
WARNING: shift/reduce conflict for G in state 85 resolved as shift
WARNING: shift/reduce conflict for GE in state 85 resolved as shift
WARNING: shift/reduce conflict for EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for NE in state 85 resolved as shift
WARNING: shift/reduce conflict for + in state 86 resolved as shift
WARNING: shift/reduce conflict for - in state 86 resolved as shift
WARNING: shift/reduce conflict for * in state 86 resolved as shift
WARNING: shift/reduce conflict for / in state 86 resolved as shift
WARNING: shift/reduce conflict for L in state 86 resolved as shift
WARNING: shift/reduce conflict for LE in state 86 resolved as shift
WARNING: shift/reduce conflict for G in state 86 resolved as shift
WARNING: shift/reduce conflict for GE in state 86 resolved as shift
WARNING: shift/reduce conflict for EQ in state 86 resolved as shift
WARNING: shift/reduce conflict for NE in state 86 resolved as shift
WARNING: shift/reduce conflict for + in state 87 resolved as shift
WARNING: shift/reduce conflict for - in state 87 resolved as shift
WARNING: shift/reduce conflict for * in state 87 resolved as shift
WARNING: shift/reduce conflict for / in state 87 resolved as shift
WARNING: shift/reduce conflict for L in state 87 resolved as shift
WARNING: shift/reduce conflict for LE in state 87 resolved as shift
WARNING: shift/reduce conflict for G in state 87 resolved as shift
WARNING: shift/reduce conflict for GE in state 87 resolved as shift
WARNING: shift/reduce conflict for EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for NE in state 87 resolved as shift
WARNING: shift/reduce conflict for + in state 88 resolved as shift
WARNING: shift/reduce conflict for - in state 88 resolved as shift
WARNING: shift/reduce conflict for * in state 88 resolved as shift
WARNING: shift/reduce conflict for / in state 88 resolved as shift
WARNING: shift/reduce conflict for L in state 88 resolved as shift
WARNING: shift/reduce conflict for LE in state 88 resolved as shift
WARNING: shift/reduce conflict for G in state 88 resolved as shift
WARNING: shift/reduce conflict for GE in state 88 resolved as shift
WARNING: shift/reduce conflict for EQ in state 88 resolved as shift
WARNING: shift/reduce conflict for NE in state 88 resolved as shift
WARNING: shift/reduce conflict for + in state 93 resolved as shift
WARNING: shift/reduce conflict for - in state 93 resolved as shift
WARNING: shift/reduce conflict for * in state 93 resolved as shift
WARNING: shift/reduce conflict for / in state 93 resolved as shift
WARNING: shift/reduce conflict for L in state 93 resolved as shift
WARNING: shift/reduce conflict for LE in state 93 resolved as shift
WARNING: shift/reduce conflict for G in state 93 resolved as shift
WARNING: shift/reduce conflict for GE in state 93 resolved as shift
WARNING: shift/reduce conflict for EQ in state 93 resolved as shift
WARNING: shift/reduce conflict for NE in state 93 resolved as shift
WARNING: shift/reduce conflict for + in state 94 resolved as shift
WARNING: shift/reduce conflict for - in state 94 resolved as shift
WARNING: shift/reduce conflict for * in state 94 resolved as shift
WARNING: shift/reduce conflict for / in state 94 resolved as shift
WARNING: shift/reduce conflict for L in state 94 resolved as shift
WARNING: shift/reduce conflict for LE in state 94 resolved as shift
WARNING: shift/reduce conflict for G in state 94 resolved as shift
WARNING: shift/reduce conflict for GE in state 94 resolved as shift
WARNING: shift/reduce conflict for EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for NE in state 94 resolved as shift
WARNING: shift/reduce conflict for COLOR in state 98 resolved as shift
WARNING: shift/reduce conflict for COLOR in state 133 resolved as shift
