Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    XOR
    STRING
    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> objects_definitions scene
Rule 2     objects_definitions -> objects_definitions object_definition
Rule 3     objects_definitions -> <empty>
Rule 4     object_definition -> DEF ID { object_body }
Rule 5     object_body -> default_color_definition ; object_body_rest
Rule 6     default_color_definition -> DEFAULT_COLOR ( expression , expression , expression )
Rule 7     block -> assigment ;
Rule 8     block -> if_expr
Rule 9     block -> while_expr
Rule 10    blocks -> blocks block
Rule 11    blocks -> <empty>
Rule 12    object_body_rest -> shape_with_transformations blocks object_body_rest
Rule 13    object_body_rest -> shape_with_transformations blocks
Rule 14    object_body_rest -> shape_without_transformations blocks object_body_rest
Rule 15    object_body_rest -> shape_without_transformations blocks
Rule 16    shape_with_transformations -> shape ; transformation_nodes
Rule 17    shape_without_transformations -> shape ;
Rule 18    transformation_nodes -> transformation_node ; transformation_nodes
Rule 19    transformation_nodes -> transformation_node ;
Rule 20    transformation_node -> rotate_node
Rule 21    transformation_node -> translation_node
Rule 22    transformation_node -> scale_node
Rule 23    transformation_node -> color_node
Rule 24    rotate_node -> ROTATE ( expression )
Rule 25    translation_node -> TRANSLATE ( expression , expression )
Rule 26    color_node -> COLOR ( expression , expression , expression )
Rule 27    scale_node -> SCALE ( expression )
Rule 28    scale_node -> SCALE ( expression , expression )
Rule 29    shape -> primitive
Rule 30    shape -> usage
Rule 31    primitive -> rectangle
Rule 32    primitive -> circle
Rule 33    primitive -> oval
Rule 34    rectangle -> RECTANGLE ( expression , expression , expression , expression )
Rule 35    rectangle -> RECTANGLE ( expression , expression , expression , expression , expression )
Rule 36    circle -> CIRCLE ( expression , expression , expression )
Rule 37    oval -> OVAL ( expression , expression , expression , expression )
Rule 38    oval -> OVAL ( expression , expression , expression , expression , expression )
Rule 39    usage -> ID
Rule 40    scene -> SCENE ( INTEGER , INTEGER ) { declarations object_body_rest }
Rule 41    declarations -> declaration ; declarations
Rule 42    declarations -> <empty>
Rule 43    type -> int_type
Rule 44    type -> float_type
Rule 45    int_type -> INT_TYPE
Rule 46    float_type -> FLOAT_TYPE
Rule 47    declaration -> type declarators
Rule 48    declarators -> declarator , declarators
Rule 49    declarators -> declarator
Rule 50    declarator -> declarator_of_id
Rule 51    declarator -> assigment
Rule 52    declarator_of_id -> ID
Rule 53    assigment -> ID = expression
Rule 54    expression -> const_expr
Rule 55    expression -> id_expr
Rule 56    expression -> two_arg_expr
Rule 57    expression -> expr_in_brackets
Rule 58    const_expr -> int_const_expr
Rule 59    const_expr -> float_const_expr
Rule 60    float_const_expr -> FLOAT
Rule 61    int_const_expr -> INTEGER
Rule 62    id_expr -> ID
Rule 63    two_arg_expr -> expression + expression
Rule 64    two_arg_expr -> expression - expression
Rule 65    two_arg_expr -> expression * expression
Rule 66    two_arg_expr -> expression / expression
Rule 67    two_arg_expr -> expression L expression
Rule 68    two_arg_expr -> expression LE expression
Rule 69    two_arg_expr -> expression G expression
Rule 70    two_arg_expr -> expression GE expression
Rule 71    two_arg_expr -> expression EQ expression
Rule 72    two_arg_expr -> expression NE expression
Rule 73    expr_in_brackets -> ( expression )
Rule 74    if_expr -> IF ( expression ) { object_body_rest }
Rule 75    if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest }
Rule 76    while_expr -> WHILE ( expression ) { object_body_rest }

Terminals, with rules where they appear

(                    : 6 24 25 26 27 28 34 35 36 37 38 40 73 74 75 76
)                    : 6 24 25 26 27 28 34 35 36 37 38 40 73 74 75 76
*                    : 65
+                    : 63
,                    : 6 6 25 26 26 28 34 34 34 35 35 35 35 36 36 37 37 37 38 38 38 38 40 48
-                    : 64
/                    : 66
;                    : 5 7 16 17 18 19 41
=                    : 53
AND                  : 
CIRCLE               : 36
COLOR                : 26
DEF                  : 4
DEFAULT_COLOR        : 6
ELSE                 : 75
EQ                   : 71
FLOAT                : 60
FLOAT_TYPE           : 46
G                    : 69
GE                   : 70
ID                   : 4 39 52 53 62
IF                   : 74 75
INTEGER              : 40 40 61
INT_TYPE             : 45
L                    : 67
LE                   : 68
NE                   : 72
OR                   : 
OVAL                 : 37 38
RECTANGLE            : 34 35
ROTATE               : 24
SCALE                : 27 28
SCENE                : 40
STRING               : 
TRANSLATE            : 25
WHILE                : 76
XOR                  : 
error                : 
{                    : 4 40 74 75 75 76
}                    : 4 40 74 75 75 76

Nonterminals, with rules where they appear

assigment            : 7 51
block                : 10
blocks               : 10 12 13 14 15
circle               : 32
color_node           : 23
const_expr           : 54
declaration          : 41
declarations         : 40 41
declarator           : 48 49
declarator_of_id     : 50
declarators          : 47 48
default_color_definition : 5
expr_in_brackets     : 57
expression           : 6 6 6 24 25 25 26 26 26 27 28 28 34 34 34 34 35 35 35 35 35 36 36 36 37 37 37 37 38 38 38 38 38 53 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 74 75 76
float_const_expr     : 59
float_type           : 44
id_expr              : 55
if_expr              : 8
int_const_expr       : 58
int_type             : 43
object_body          : 4
object_body_rest     : 5 12 14 40 74 75 75 76
object_definition    : 2
objects_definitions  : 1 2
oval                 : 33
primitive            : 29
program              : 0
rectangle            : 31
rotate_node          : 20
scale_node           : 22
scene                : 1
shape                : 16 17
shape_with_transformations : 12 13
shape_without_transformations : 14 15
transformation_node  : 18 19
transformation_nodes : 16 18
translation_node     : 21
two_arg_expr         : 56
type                 : 47
usage                : 30
while_expr           : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . objects_definitions scene
    (2) objects_definitions -> . objects_definitions object_definition
    (3) objects_definitions -> .

    SCENE           reduce using rule 3 (objects_definitions -> .)
    DEF             reduce using rule 3 (objects_definitions -> .)

    program                        shift and go to state 1
    objects_definitions            shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> objects_definitions . scene
    (2) objects_definitions -> objects_definitions . object_definition
    (40) scene -> . SCENE ( INTEGER , INTEGER ) { declarations object_body_rest }
    (4) object_definition -> . DEF ID { object_body }

    SCENE           shift and go to state 4
    DEF             shift and go to state 6

    scene                          shift and go to state 3
    object_definition              shift and go to state 5

state 3

    (1) program -> objects_definitions scene .

    $end            reduce using rule 1 (program -> objects_definitions scene .)


state 4

    (40) scene -> SCENE . ( INTEGER , INTEGER ) { declarations object_body_rest }

    (               shift and go to state 7


state 5

    (2) objects_definitions -> objects_definitions object_definition .

    SCENE           reduce using rule 2 (objects_definitions -> objects_definitions object_definition .)
    DEF             reduce using rule 2 (objects_definitions -> objects_definitions object_definition .)


state 6

    (4) object_definition -> DEF . ID { object_body }

    ID              shift and go to state 8


state 7

    (40) scene -> SCENE ( . INTEGER , INTEGER ) { declarations object_body_rest }

    INTEGER         shift and go to state 9


state 8

    (4) object_definition -> DEF ID . { object_body }

    {               shift and go to state 10


state 9

    (40) scene -> SCENE ( INTEGER . , INTEGER ) { declarations object_body_rest }

    ,               shift and go to state 11


state 10

    (4) object_definition -> DEF ID { . object_body }
    (5) object_body -> . default_color_definition ; object_body_rest
    (6) default_color_definition -> . DEFAULT_COLOR ( expression , expression , expression )

    DEFAULT_COLOR   shift and go to state 13

    default_color_definition       shift and go to state 12
    object_body                    shift and go to state 14

state 11

    (40) scene -> SCENE ( INTEGER , . INTEGER ) { declarations object_body_rest }

    INTEGER         shift and go to state 15


state 12

    (5) object_body -> default_color_definition . ; object_body_rest

    ;               shift and go to state 16


state 13

    (6) default_color_definition -> DEFAULT_COLOR . ( expression , expression , expression )

    (               shift and go to state 17


state 14

    (4) object_definition -> DEF ID { object_body . }

    }               shift and go to state 18


state 15

    (40) scene -> SCENE ( INTEGER , INTEGER . ) { declarations object_body_rest }

    )               shift and go to state 19


state 16

    (5) object_body -> default_color_definition ; . object_body_rest
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    ID              shift and go to state 24
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    primitive                      shift and go to state 20
    oval                           shift and go to state 23
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 26
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    rectangle                      shift and go to state 32

state 17

    (6) default_color_definition -> DEFAULT_COLOR ( . expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 41
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 18

    (4) object_definition -> DEF ID { object_body } .

    SCENE           reduce using rule 4 (object_definition -> DEF ID { object_body } .)
    DEF             reduce using rule 4 (object_definition -> DEF ID { object_body } .)


state 19

    (40) scene -> SCENE ( INTEGER , INTEGER ) . { declarations object_body_rest }

    {               shift and go to state 44


state 20

    (29) shape -> primitive .

    ;               reduce using rule 29 (shape -> primitive .)


state 21

    (36) circle -> CIRCLE . ( expression , expression , expression )

    (               shift and go to state 45


state 22

    (37) oval -> OVAL . ( expression , expression , expression , expression )
    (38) oval -> OVAL . ( expression , expression , expression , expression , expression )

    (               shift and go to state 46


state 23

    (33) primitive -> oval .

    ;               reduce using rule 33 (primitive -> oval .)


state 24

    (39) usage -> ID .

    ;               reduce using rule 39 (usage -> ID .)


state 25

    (14) object_body_rest -> shape_without_transformations . blocks object_body_rest
    (15) object_body_rest -> shape_without_transformations . blocks
    (10) blocks -> . blocks block
    (11) blocks -> .

    ID              reduce using rule 11 (blocks -> .)
    IF              reduce using rule 11 (blocks -> .)
    WHILE           reduce using rule 11 (blocks -> .)
    RECTANGLE       reduce using rule 11 (blocks -> .)
    CIRCLE          reduce using rule 11 (blocks -> .)
    OVAL            reduce using rule 11 (blocks -> .)
    }               reduce using rule 11 (blocks -> .)

    blocks                         shift and go to state 47

state 26

    (5) object_body -> default_color_definition ; object_body_rest .

    }               reduce using rule 5 (object_body -> default_color_definition ; object_body_rest .)


state 27

    (16) shape_with_transformations -> shape . ; transformation_nodes
    (17) shape_without_transformations -> shape . ;

    ;               shift and go to state 48


state 28

    (12) object_body_rest -> shape_with_transformations . blocks object_body_rest
    (13) object_body_rest -> shape_with_transformations . blocks
    (10) blocks -> . blocks block
    (11) blocks -> .

    ID              reduce using rule 11 (blocks -> .)
    IF              reduce using rule 11 (blocks -> .)
    WHILE           reduce using rule 11 (blocks -> .)
    RECTANGLE       reduce using rule 11 (blocks -> .)
    CIRCLE          reduce using rule 11 (blocks -> .)
    OVAL            reduce using rule 11 (blocks -> .)
    }               reduce using rule 11 (blocks -> .)

    blocks                         shift and go to state 49

state 29

    (34) rectangle -> RECTANGLE . ( expression , expression , expression , expression )
    (35) rectangle -> RECTANGLE . ( expression , expression , expression , expression , expression )

    (               shift and go to state 50


state 30

    (30) shape -> usage .

    ;               reduce using rule 30 (shape -> usage .)


state 31

    (32) primitive -> circle .

    ;               reduce using rule 32 (primitive -> circle .)


state 32

    (31) primitive -> rectangle .

    ;               reduce using rule 31 (primitive -> rectangle .)


state 33

    (54) expression -> const_expr .

    +               reduce using rule 54 (expression -> const_expr .)
    -               reduce using rule 54 (expression -> const_expr .)
    *               reduce using rule 54 (expression -> const_expr .)
    /               reduce using rule 54 (expression -> const_expr .)
    L               reduce using rule 54 (expression -> const_expr .)
    LE              reduce using rule 54 (expression -> const_expr .)
    G               reduce using rule 54 (expression -> const_expr .)
    GE              reduce using rule 54 (expression -> const_expr .)
    EQ              reduce using rule 54 (expression -> const_expr .)
    NE              reduce using rule 54 (expression -> const_expr .)
    ,               reduce using rule 54 (expression -> const_expr .)
    )               reduce using rule 54 (expression -> const_expr .)
    ;               reduce using rule 54 (expression -> const_expr .)


state 34

    (73) expr_in_brackets -> ( . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 51
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 35

    (56) expression -> two_arg_expr .

    +               reduce using rule 56 (expression -> two_arg_expr .)
    -               reduce using rule 56 (expression -> two_arg_expr .)
    *               reduce using rule 56 (expression -> two_arg_expr .)
    /               reduce using rule 56 (expression -> two_arg_expr .)
    L               reduce using rule 56 (expression -> two_arg_expr .)
    LE              reduce using rule 56 (expression -> two_arg_expr .)
    G               reduce using rule 56 (expression -> two_arg_expr .)
    GE              reduce using rule 56 (expression -> two_arg_expr .)
    EQ              reduce using rule 56 (expression -> two_arg_expr .)
    NE              reduce using rule 56 (expression -> two_arg_expr .)
    ,               reduce using rule 56 (expression -> two_arg_expr .)
    )               reduce using rule 56 (expression -> two_arg_expr .)
    ;               reduce using rule 56 (expression -> two_arg_expr .)


state 36

    (61) int_const_expr -> INTEGER .

    +               reduce using rule 61 (int_const_expr -> INTEGER .)
    -               reduce using rule 61 (int_const_expr -> INTEGER .)
    *               reduce using rule 61 (int_const_expr -> INTEGER .)
    /               reduce using rule 61 (int_const_expr -> INTEGER .)
    L               reduce using rule 61 (int_const_expr -> INTEGER .)
    LE              reduce using rule 61 (int_const_expr -> INTEGER .)
    G               reduce using rule 61 (int_const_expr -> INTEGER .)
    GE              reduce using rule 61 (int_const_expr -> INTEGER .)
    EQ              reduce using rule 61 (int_const_expr -> INTEGER .)
    NE              reduce using rule 61 (int_const_expr -> INTEGER .)
    ,               reduce using rule 61 (int_const_expr -> INTEGER .)
    )               reduce using rule 61 (int_const_expr -> INTEGER .)
    ;               reduce using rule 61 (int_const_expr -> INTEGER .)


state 37

    (58) const_expr -> int_const_expr .

    ,               reduce using rule 58 (const_expr -> int_const_expr .)
    +               reduce using rule 58 (const_expr -> int_const_expr .)
    -               reduce using rule 58 (const_expr -> int_const_expr .)
    *               reduce using rule 58 (const_expr -> int_const_expr .)
    /               reduce using rule 58 (const_expr -> int_const_expr .)
    L               reduce using rule 58 (const_expr -> int_const_expr .)
    LE              reduce using rule 58 (const_expr -> int_const_expr .)
    G               reduce using rule 58 (const_expr -> int_const_expr .)
    GE              reduce using rule 58 (const_expr -> int_const_expr .)
    EQ              reduce using rule 58 (const_expr -> int_const_expr .)
    NE              reduce using rule 58 (const_expr -> int_const_expr .)
    )               reduce using rule 58 (const_expr -> int_const_expr .)
    ;               reduce using rule 58 (const_expr -> int_const_expr .)


state 38

    (59) const_expr -> float_const_expr .

    ,               reduce using rule 59 (const_expr -> float_const_expr .)
    +               reduce using rule 59 (const_expr -> float_const_expr .)
    -               reduce using rule 59 (const_expr -> float_const_expr .)
    *               reduce using rule 59 (const_expr -> float_const_expr .)
    /               reduce using rule 59 (const_expr -> float_const_expr .)
    L               reduce using rule 59 (const_expr -> float_const_expr .)
    LE              reduce using rule 59 (const_expr -> float_const_expr .)
    G               reduce using rule 59 (const_expr -> float_const_expr .)
    GE              reduce using rule 59 (const_expr -> float_const_expr .)
    EQ              reduce using rule 59 (const_expr -> float_const_expr .)
    NE              reduce using rule 59 (const_expr -> float_const_expr .)
    )               reduce using rule 59 (const_expr -> float_const_expr .)
    ;               reduce using rule 59 (const_expr -> float_const_expr .)


state 39

    (62) id_expr -> ID .

    )               reduce using rule 62 (id_expr -> ID .)
    +               reduce using rule 62 (id_expr -> ID .)
    -               reduce using rule 62 (id_expr -> ID .)
    *               reduce using rule 62 (id_expr -> ID .)
    /               reduce using rule 62 (id_expr -> ID .)
    L               reduce using rule 62 (id_expr -> ID .)
    LE              reduce using rule 62 (id_expr -> ID .)
    G               reduce using rule 62 (id_expr -> ID .)
    GE              reduce using rule 62 (id_expr -> ID .)
    EQ              reduce using rule 62 (id_expr -> ID .)
    NE              reduce using rule 62 (id_expr -> ID .)
    ,               reduce using rule 62 (id_expr -> ID .)
    ;               reduce using rule 62 (id_expr -> ID .)


state 40

    (57) expression -> expr_in_brackets .

    +               reduce using rule 57 (expression -> expr_in_brackets .)
    -               reduce using rule 57 (expression -> expr_in_brackets .)
    *               reduce using rule 57 (expression -> expr_in_brackets .)
    /               reduce using rule 57 (expression -> expr_in_brackets .)
    L               reduce using rule 57 (expression -> expr_in_brackets .)
    LE              reduce using rule 57 (expression -> expr_in_brackets .)
    G               reduce using rule 57 (expression -> expr_in_brackets .)
    GE              reduce using rule 57 (expression -> expr_in_brackets .)
    EQ              reduce using rule 57 (expression -> expr_in_brackets .)
    NE              reduce using rule 57 (expression -> expr_in_brackets .)
    ,               reduce using rule 57 (expression -> expr_in_brackets .)
    )               reduce using rule 57 (expression -> expr_in_brackets .)
    ;               reduce using rule 57 (expression -> expr_in_brackets .)


state 41

    (6) default_color_definition -> DEFAULT_COLOR ( expression . , expression , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 59
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 42

    (60) float_const_expr -> FLOAT .

    +               reduce using rule 60 (float_const_expr -> FLOAT .)
    -               reduce using rule 60 (float_const_expr -> FLOAT .)
    *               reduce using rule 60 (float_const_expr -> FLOAT .)
    /               reduce using rule 60 (float_const_expr -> FLOAT .)
    L               reduce using rule 60 (float_const_expr -> FLOAT .)
    LE              reduce using rule 60 (float_const_expr -> FLOAT .)
    G               reduce using rule 60 (float_const_expr -> FLOAT .)
    GE              reduce using rule 60 (float_const_expr -> FLOAT .)
    EQ              reduce using rule 60 (float_const_expr -> FLOAT .)
    NE              reduce using rule 60 (float_const_expr -> FLOAT .)
    ,               reduce using rule 60 (float_const_expr -> FLOAT .)
    )               reduce using rule 60 (float_const_expr -> FLOAT .)
    ;               reduce using rule 60 (float_const_expr -> FLOAT .)


state 43

    (55) expression -> id_expr .

    +               reduce using rule 55 (expression -> id_expr .)
    -               reduce using rule 55 (expression -> id_expr .)
    *               reduce using rule 55 (expression -> id_expr .)
    /               reduce using rule 55 (expression -> id_expr .)
    L               reduce using rule 55 (expression -> id_expr .)
    LE              reduce using rule 55 (expression -> id_expr .)
    G               reduce using rule 55 (expression -> id_expr .)
    GE              reduce using rule 55 (expression -> id_expr .)
    EQ              reduce using rule 55 (expression -> id_expr .)
    NE              reduce using rule 55 (expression -> id_expr .)
    ,               reduce using rule 55 (expression -> id_expr .)
    )               reduce using rule 55 (expression -> id_expr .)
    ;               reduce using rule 55 (expression -> id_expr .)


state 44

    (40) scene -> SCENE ( INTEGER , INTEGER ) { . declarations object_body_rest }
    (41) declarations -> . declaration ; declarations
    (42) declarations -> .
    (47) declaration -> . type declarators
    (43) type -> . int_type
    (44) type -> . float_type
    (45) int_type -> . INT_TYPE
    (46) float_type -> . FLOAT_TYPE

    ID              reduce using rule 42 (declarations -> .)
    RECTANGLE       reduce using rule 42 (declarations -> .)
    CIRCLE          reduce using rule 42 (declarations -> .)
    OVAL            reduce using rule 42 (declarations -> .)
    INT_TYPE        shift and go to state 65
    FLOAT_TYPE      shift and go to state 63

    float_type                     shift and go to state 66
    declarations                   shift and go to state 67
    int_type                       shift and go to state 68
    declaration                    shift and go to state 69
    type                           shift and go to state 64

state 45

    (36) circle -> CIRCLE ( . expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 70
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 46

    (37) oval -> OVAL ( . expression , expression , expression , expression )
    (38) oval -> OVAL ( . expression , expression , expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 71
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 47

    (14) object_body_rest -> shape_without_transformations blocks . object_body_rest
    (15) object_body_rest -> shape_without_transformations blocks .
    (10) blocks -> blocks . block
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (7) block -> . assigment ;
    (8) block -> . if_expr
    (9) block -> . while_expr
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (53) assigment -> . ID = expression
    (74) if_expr -> . IF ( expression ) { object_body_rest }
    (75) if_expr -> . IF ( expression ) { object_body_rest } ELSE { object_body_rest }
    (76) while_expr -> . WHILE ( expression ) { object_body_rest }
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    }               reduce using rule 15 (object_body_rest -> shape_without_transformations blocks .)
    ID              shift and go to state 76
    IF              shift and go to state 77
    WHILE           shift and go to state 73
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    if_expr                        shift and go to state 78
    assigment                      shift and go to state 74
    while_expr                     shift and go to state 75
    primitive                      shift and go to state 20
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 72
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    rectangle                      shift and go to state 32
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    oval                           shift and go to state 23
    block                          shift and go to state 79

state 48

    (16) shape_with_transformations -> shape ; . transformation_nodes
    (17) shape_without_transformations -> shape ; .
    (18) transformation_nodes -> . transformation_node ; transformation_nodes
    (19) transformation_nodes -> . transformation_node ;
    (20) transformation_node -> . rotate_node
    (21) transformation_node -> . translation_node
    (22) transformation_node -> . scale_node
    (23) transformation_node -> . color_node
    (24) rotate_node -> . ROTATE ( expression )
    (25) translation_node -> . TRANSLATE ( expression , expression )
    (27) scale_node -> . SCALE ( expression )
    (28) scale_node -> . SCALE ( expression , expression )
    (26) color_node -> . COLOR ( expression , expression , expression )

    ID              reduce using rule 17 (shape_without_transformations -> shape ; .)
    IF              reduce using rule 17 (shape_without_transformations -> shape ; .)
    WHILE           reduce using rule 17 (shape_without_transformations -> shape ; .)
    RECTANGLE       reduce using rule 17 (shape_without_transformations -> shape ; .)
    CIRCLE          reduce using rule 17 (shape_without_transformations -> shape ; .)
    OVAL            reduce using rule 17 (shape_without_transformations -> shape ; .)
    }               reduce using rule 17 (shape_without_transformations -> shape ; .)
    ROTATE          shift and go to state 80
    TRANSLATE       shift and go to state 88
    SCALE           shift and go to state 85
    COLOR           shift and go to state 84

    scale_node                     shift and go to state 81
    transformation_nodes           shift and go to state 82
    translation_node               shift and go to state 83
    color_node                     shift and go to state 86
    transformation_node            shift and go to state 87
    rotate_node                    shift and go to state 89

state 49

    (12) object_body_rest -> shape_with_transformations blocks . object_body_rest
    (13) object_body_rest -> shape_with_transformations blocks .
    (10) blocks -> blocks . block
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (7) block -> . assigment ;
    (8) block -> . if_expr
    (9) block -> . while_expr
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (53) assigment -> . ID = expression
    (74) if_expr -> . IF ( expression ) { object_body_rest }
    (75) if_expr -> . IF ( expression ) { object_body_rest } ELSE { object_body_rest }
    (76) while_expr -> . WHILE ( expression ) { object_body_rest }
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    }               reduce using rule 13 (object_body_rest -> shape_with_transformations blocks .)
    ID              shift and go to state 76
    IF              shift and go to state 77
    WHILE           shift and go to state 73
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    if_expr                        shift and go to state 78
    assigment                      shift and go to state 74
    while_expr                     shift and go to state 75
    primitive                      shift and go to state 20
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 90
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    rectangle                      shift and go to state 32
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    oval                           shift and go to state 23
    block                          shift and go to state 79

state 50

    (34) rectangle -> RECTANGLE ( . expression , expression , expression , expression )
    (35) rectangle -> RECTANGLE ( . expression , expression , expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 91
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 51

    (73) expr_in_brackets -> ( expression . )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 92
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 52

    (68) two_arg_expr -> expression LE . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 93
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 53

    (71) two_arg_expr -> expression EQ . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 94
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 54

    (72) two_arg_expr -> expression NE . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 95
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 55

    (69) two_arg_expr -> expression G . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 96
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 56

    (63) two_arg_expr -> expression + . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 97
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 57

    (65) two_arg_expr -> expression * . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 98
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 58

    (64) two_arg_expr -> expression - . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 99
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 59

    (6) default_color_definition -> DEFAULT_COLOR ( expression , . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 100
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 60

    (67) two_arg_expr -> expression L . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 101
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 61

    (70) two_arg_expr -> expression GE . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 102
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 62

    (66) two_arg_expr -> expression / . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 103
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 63

    (46) float_type -> FLOAT_TYPE .

    ID              reduce using rule 46 (float_type -> FLOAT_TYPE .)


state 64

    (47) declaration -> type . declarators
    (48) declarators -> . declarator , declarators
    (49) declarators -> . declarator
    (50) declarator -> . declarator_of_id
    (51) declarator -> . assigment
    (52) declarator_of_id -> . ID
    (53) assigment -> . ID = expression

    ID              shift and go to state 108

    assigment                      shift and go to state 104
    declarators                    shift and go to state 105
    declarator_of_id               shift and go to state 106
    declarator                     shift and go to state 107

state 65

    (45) int_type -> INT_TYPE .

    ID              reduce using rule 45 (int_type -> INT_TYPE .)


state 66

    (44) type -> float_type .

    ID              reduce using rule 44 (type -> float_type .)


state 67

    (40) scene -> SCENE ( INTEGER , INTEGER ) { declarations . object_body_rest }
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    ID              shift and go to state 24
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    primitive                      shift and go to state 20
    oval                           shift and go to state 23
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 109
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    rectangle                      shift and go to state 32

state 68

    (43) type -> int_type .

    ID              reduce using rule 43 (type -> int_type .)


state 69

    (41) declarations -> declaration . ; declarations

    ;               shift and go to state 110


state 70

    (36) circle -> CIRCLE ( expression . , expression , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 111
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 71

    (37) oval -> OVAL ( expression . , expression , expression , expression )
    (38) oval -> OVAL ( expression . , expression , expression , expression , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 112
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 72

    (14) object_body_rest -> shape_without_transformations blocks object_body_rest .

    }               reduce using rule 14 (object_body_rest -> shape_without_transformations blocks object_body_rest .)


state 73

    (76) while_expr -> WHILE . ( expression ) { object_body_rest }

    (               shift and go to state 113


state 74

    (7) block -> assigment . ;

    ;               shift and go to state 114


state 75

    (9) block -> while_expr .

    ID              reduce using rule 9 (block -> while_expr .)
    IF              reduce using rule 9 (block -> while_expr .)
    WHILE           reduce using rule 9 (block -> while_expr .)
    RECTANGLE       reduce using rule 9 (block -> while_expr .)
    CIRCLE          reduce using rule 9 (block -> while_expr .)
    OVAL            reduce using rule 9 (block -> while_expr .)
    }               reduce using rule 9 (block -> while_expr .)


state 76

    (53) assigment -> ID . = expression
    (39) usage -> ID .

    =               shift and go to state 115
    ;               reduce using rule 39 (usage -> ID .)


state 77

    (74) if_expr -> IF . ( expression ) { object_body_rest }
    (75) if_expr -> IF . ( expression ) { object_body_rest } ELSE { object_body_rest }

    (               shift and go to state 116


state 78

    (8) block -> if_expr .

    ID              reduce using rule 8 (block -> if_expr .)
    IF              reduce using rule 8 (block -> if_expr .)
    WHILE           reduce using rule 8 (block -> if_expr .)
    RECTANGLE       reduce using rule 8 (block -> if_expr .)
    CIRCLE          reduce using rule 8 (block -> if_expr .)
    OVAL            reduce using rule 8 (block -> if_expr .)
    }               reduce using rule 8 (block -> if_expr .)


state 79

    (10) blocks -> blocks block .

    ID              reduce using rule 10 (blocks -> blocks block .)
    IF              reduce using rule 10 (blocks -> blocks block .)
    WHILE           reduce using rule 10 (blocks -> blocks block .)
    RECTANGLE       reduce using rule 10 (blocks -> blocks block .)
    CIRCLE          reduce using rule 10 (blocks -> blocks block .)
    OVAL            reduce using rule 10 (blocks -> blocks block .)
    }               reduce using rule 10 (blocks -> blocks block .)


state 80

    (24) rotate_node -> ROTATE . ( expression )

    (               shift and go to state 117


state 81

    (22) transformation_node -> scale_node .

    ;               reduce using rule 22 (transformation_node -> scale_node .)


state 82

    (16) shape_with_transformations -> shape ; transformation_nodes .

    ID              reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    IF              reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    WHILE           reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    RECTANGLE       reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    CIRCLE          reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    OVAL            reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    }               reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)


state 83

    (21) transformation_node -> translation_node .

    ;               reduce using rule 21 (transformation_node -> translation_node .)


state 84

    (26) color_node -> COLOR . ( expression , expression , expression )

    (               shift and go to state 118


state 85

    (27) scale_node -> SCALE . ( expression )
    (28) scale_node -> SCALE . ( expression , expression )

    (               shift and go to state 119


state 86

    (23) transformation_node -> color_node .

    ;               reduce using rule 23 (transformation_node -> color_node .)


state 87

    (18) transformation_nodes -> transformation_node . ; transformation_nodes
    (19) transformation_nodes -> transformation_node . ;

    ;               shift and go to state 120


state 88

    (25) translation_node -> TRANSLATE . ( expression , expression )

    (               shift and go to state 121


state 89

    (20) transformation_node -> rotate_node .

    ;               reduce using rule 20 (transformation_node -> rotate_node .)


state 90

    (12) object_body_rest -> shape_with_transformations blocks object_body_rest .

    }               reduce using rule 12 (object_body_rest -> shape_with_transformations blocks object_body_rest .)


state 91

    (34) rectangle -> RECTANGLE ( expression . , expression , expression , expression )
    (35) rectangle -> RECTANGLE ( expression . , expression , expression , expression , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 122
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 92

    (73) expr_in_brackets -> ( expression ) .

    +               reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    -               reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    *               reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    /               reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    L               reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    LE              reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    G               reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    GE              reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    EQ              reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    NE              reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    ;               reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    ,               reduce using rule 73 (expr_in_brackets -> ( expression ) .)
    )               reduce using rule 73 (expr_in_brackets -> ( expression ) .)


state 93

    (68) two_arg_expr -> expression LE expression .
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 68 (two_arg_expr -> expression LE expression .)
    )               reduce using rule 68 (two_arg_expr -> expression LE expression .)
    ;               reduce using rule 68 (two_arg_expr -> expression LE expression .)
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

  ! +               [ reduce using rule 68 (two_arg_expr -> expression LE expression .) ]
  ! -               [ reduce using rule 68 (two_arg_expr -> expression LE expression .) ]
  ! *               [ reduce using rule 68 (two_arg_expr -> expression LE expression .) ]
  ! /               [ reduce using rule 68 (two_arg_expr -> expression LE expression .) ]
  ! L               [ reduce using rule 68 (two_arg_expr -> expression LE expression .) ]
  ! LE              [ reduce using rule 68 (two_arg_expr -> expression LE expression .) ]
  ! G               [ reduce using rule 68 (two_arg_expr -> expression LE expression .) ]
  ! GE              [ reduce using rule 68 (two_arg_expr -> expression LE expression .) ]
  ! EQ              [ reduce using rule 68 (two_arg_expr -> expression LE expression .) ]
  ! NE              [ reduce using rule 68 (two_arg_expr -> expression LE expression .) ]


state 94

    (71) two_arg_expr -> expression EQ expression .
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 71 (two_arg_expr -> expression EQ expression .)
    )               reduce using rule 71 (two_arg_expr -> expression EQ expression .)
    ;               reduce using rule 71 (two_arg_expr -> expression EQ expression .)
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

  ! +               [ reduce using rule 71 (two_arg_expr -> expression EQ expression .) ]
  ! -               [ reduce using rule 71 (two_arg_expr -> expression EQ expression .) ]
  ! *               [ reduce using rule 71 (two_arg_expr -> expression EQ expression .) ]
  ! /               [ reduce using rule 71 (two_arg_expr -> expression EQ expression .) ]
  ! L               [ reduce using rule 71 (two_arg_expr -> expression EQ expression .) ]
  ! LE              [ reduce using rule 71 (two_arg_expr -> expression EQ expression .) ]
  ! G               [ reduce using rule 71 (two_arg_expr -> expression EQ expression .) ]
  ! GE              [ reduce using rule 71 (two_arg_expr -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 71 (two_arg_expr -> expression EQ expression .) ]
  ! NE              [ reduce using rule 71 (two_arg_expr -> expression EQ expression .) ]


state 95

    (72) two_arg_expr -> expression NE expression .
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 72 (two_arg_expr -> expression NE expression .)
    )               reduce using rule 72 (two_arg_expr -> expression NE expression .)
    ;               reduce using rule 72 (two_arg_expr -> expression NE expression .)
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

  ! +               [ reduce using rule 72 (two_arg_expr -> expression NE expression .) ]
  ! -               [ reduce using rule 72 (two_arg_expr -> expression NE expression .) ]
  ! *               [ reduce using rule 72 (two_arg_expr -> expression NE expression .) ]
  ! /               [ reduce using rule 72 (two_arg_expr -> expression NE expression .) ]
  ! L               [ reduce using rule 72 (two_arg_expr -> expression NE expression .) ]
  ! LE              [ reduce using rule 72 (two_arg_expr -> expression NE expression .) ]
  ! G               [ reduce using rule 72 (two_arg_expr -> expression NE expression .) ]
  ! GE              [ reduce using rule 72 (two_arg_expr -> expression NE expression .) ]
  ! EQ              [ reduce using rule 72 (two_arg_expr -> expression NE expression .) ]
  ! NE              [ reduce using rule 72 (two_arg_expr -> expression NE expression .) ]


state 96

    (69) two_arg_expr -> expression G expression .
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 69 (two_arg_expr -> expression G expression .)
    )               reduce using rule 69 (two_arg_expr -> expression G expression .)
    ;               reduce using rule 69 (two_arg_expr -> expression G expression .)
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

  ! +               [ reduce using rule 69 (two_arg_expr -> expression G expression .) ]
  ! -               [ reduce using rule 69 (two_arg_expr -> expression G expression .) ]
  ! *               [ reduce using rule 69 (two_arg_expr -> expression G expression .) ]
  ! /               [ reduce using rule 69 (two_arg_expr -> expression G expression .) ]
  ! L               [ reduce using rule 69 (two_arg_expr -> expression G expression .) ]
  ! LE              [ reduce using rule 69 (two_arg_expr -> expression G expression .) ]
  ! G               [ reduce using rule 69 (two_arg_expr -> expression G expression .) ]
  ! GE              [ reduce using rule 69 (two_arg_expr -> expression G expression .) ]
  ! EQ              [ reduce using rule 69 (two_arg_expr -> expression G expression .) ]
  ! NE              [ reduce using rule 69 (two_arg_expr -> expression G expression .) ]


state 97

    (63) two_arg_expr -> expression + expression .
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               reduce using rule 63 (two_arg_expr -> expression + expression .)
    +               reduce using rule 63 (two_arg_expr -> expression + expression .)
    -               reduce using rule 63 (two_arg_expr -> expression + expression .)
    L               reduce using rule 63 (two_arg_expr -> expression + expression .)
    LE              reduce using rule 63 (two_arg_expr -> expression + expression .)
    G               reduce using rule 63 (two_arg_expr -> expression + expression .)
    GE              reduce using rule 63 (two_arg_expr -> expression + expression .)
    EQ              reduce using rule 63 (two_arg_expr -> expression + expression .)
    NE              reduce using rule 63 (two_arg_expr -> expression + expression .)
    )               reduce using rule 63 (two_arg_expr -> expression + expression .)
    ;               reduce using rule 63 (two_arg_expr -> expression + expression .)
    *               shift and go to state 57
    /               shift and go to state 62

  ! *               [ reduce using rule 63 (two_arg_expr -> expression + expression .) ]
  ! /               [ reduce using rule 63 (two_arg_expr -> expression + expression .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 58 ]
  ! L               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 52 ]
  ! G               [ shift and go to state 55 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 98

    (65) two_arg_expr -> expression * expression .
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               reduce using rule 65 (two_arg_expr -> expression * expression .)
    +               reduce using rule 65 (two_arg_expr -> expression * expression .)
    -               reduce using rule 65 (two_arg_expr -> expression * expression .)
    *               reduce using rule 65 (two_arg_expr -> expression * expression .)
    /               reduce using rule 65 (two_arg_expr -> expression * expression .)
    L               reduce using rule 65 (two_arg_expr -> expression * expression .)
    LE              reduce using rule 65 (two_arg_expr -> expression * expression .)
    G               reduce using rule 65 (two_arg_expr -> expression * expression .)
    GE              reduce using rule 65 (two_arg_expr -> expression * expression .)
    EQ              reduce using rule 65 (two_arg_expr -> expression * expression .)
    NE              reduce using rule 65 (two_arg_expr -> expression * expression .)
    )               reduce using rule 65 (two_arg_expr -> expression * expression .)
    ;               reduce using rule 65 (two_arg_expr -> expression * expression .)

  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 58 ]
  ! *               [ shift and go to state 57 ]
  ! /               [ shift and go to state 62 ]
  ! L               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 52 ]
  ! G               [ shift and go to state 55 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 99

    (64) two_arg_expr -> expression - expression .
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               reduce using rule 64 (two_arg_expr -> expression - expression .)
    +               reduce using rule 64 (two_arg_expr -> expression - expression .)
    -               reduce using rule 64 (two_arg_expr -> expression - expression .)
    L               reduce using rule 64 (two_arg_expr -> expression - expression .)
    LE              reduce using rule 64 (two_arg_expr -> expression - expression .)
    G               reduce using rule 64 (two_arg_expr -> expression - expression .)
    GE              reduce using rule 64 (two_arg_expr -> expression - expression .)
    EQ              reduce using rule 64 (two_arg_expr -> expression - expression .)
    NE              reduce using rule 64 (two_arg_expr -> expression - expression .)
    )               reduce using rule 64 (two_arg_expr -> expression - expression .)
    ;               reduce using rule 64 (two_arg_expr -> expression - expression .)
    *               shift and go to state 57
    /               shift and go to state 62

  ! *               [ reduce using rule 64 (two_arg_expr -> expression - expression .) ]
  ! /               [ reduce using rule 64 (two_arg_expr -> expression - expression .) ]
  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 58 ]
  ! L               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 52 ]
  ! G               [ shift and go to state 55 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 100

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression . , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 123
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 101

    (67) two_arg_expr -> expression L expression .
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 67 (two_arg_expr -> expression L expression .)
    )               reduce using rule 67 (two_arg_expr -> expression L expression .)
    ;               reduce using rule 67 (two_arg_expr -> expression L expression .)
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

  ! +               [ reduce using rule 67 (two_arg_expr -> expression L expression .) ]
  ! -               [ reduce using rule 67 (two_arg_expr -> expression L expression .) ]
  ! *               [ reduce using rule 67 (two_arg_expr -> expression L expression .) ]
  ! /               [ reduce using rule 67 (two_arg_expr -> expression L expression .) ]
  ! L               [ reduce using rule 67 (two_arg_expr -> expression L expression .) ]
  ! LE              [ reduce using rule 67 (two_arg_expr -> expression L expression .) ]
  ! G               [ reduce using rule 67 (two_arg_expr -> expression L expression .) ]
  ! GE              [ reduce using rule 67 (two_arg_expr -> expression L expression .) ]
  ! EQ              [ reduce using rule 67 (two_arg_expr -> expression L expression .) ]
  ! NE              [ reduce using rule 67 (two_arg_expr -> expression L expression .) ]


state 102

    (70) two_arg_expr -> expression GE expression .
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 70 (two_arg_expr -> expression GE expression .)
    )               reduce using rule 70 (two_arg_expr -> expression GE expression .)
    ;               reduce using rule 70 (two_arg_expr -> expression GE expression .)
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

  ! +               [ reduce using rule 70 (two_arg_expr -> expression GE expression .) ]
  ! -               [ reduce using rule 70 (two_arg_expr -> expression GE expression .) ]
  ! *               [ reduce using rule 70 (two_arg_expr -> expression GE expression .) ]
  ! /               [ reduce using rule 70 (two_arg_expr -> expression GE expression .) ]
  ! L               [ reduce using rule 70 (two_arg_expr -> expression GE expression .) ]
  ! LE              [ reduce using rule 70 (two_arg_expr -> expression GE expression .) ]
  ! G               [ reduce using rule 70 (two_arg_expr -> expression GE expression .) ]
  ! GE              [ reduce using rule 70 (two_arg_expr -> expression GE expression .) ]
  ! EQ              [ reduce using rule 70 (two_arg_expr -> expression GE expression .) ]
  ! NE              [ reduce using rule 70 (two_arg_expr -> expression GE expression .) ]


state 103

    (66) two_arg_expr -> expression / expression .
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               reduce using rule 66 (two_arg_expr -> expression / expression .)
    +               reduce using rule 66 (two_arg_expr -> expression / expression .)
    -               reduce using rule 66 (two_arg_expr -> expression / expression .)
    *               reduce using rule 66 (two_arg_expr -> expression / expression .)
    /               reduce using rule 66 (two_arg_expr -> expression / expression .)
    L               reduce using rule 66 (two_arg_expr -> expression / expression .)
    LE              reduce using rule 66 (two_arg_expr -> expression / expression .)
    G               reduce using rule 66 (two_arg_expr -> expression / expression .)
    GE              reduce using rule 66 (two_arg_expr -> expression / expression .)
    EQ              reduce using rule 66 (two_arg_expr -> expression / expression .)
    NE              reduce using rule 66 (two_arg_expr -> expression / expression .)
    )               reduce using rule 66 (two_arg_expr -> expression / expression .)
    ;               reduce using rule 66 (two_arg_expr -> expression / expression .)

  ! +               [ shift and go to state 56 ]
  ! -               [ shift and go to state 58 ]
  ! *               [ shift and go to state 57 ]
  ! /               [ shift and go to state 62 ]
  ! L               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 52 ]
  ! G               [ shift and go to state 55 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 104

    (51) declarator -> assigment .

    ,               reduce using rule 51 (declarator -> assigment .)
    ;               reduce using rule 51 (declarator -> assigment .)


state 105

    (47) declaration -> type declarators .

    ;               reduce using rule 47 (declaration -> type declarators .)


state 106

    (50) declarator -> declarator_of_id .

    ,               reduce using rule 50 (declarator -> declarator_of_id .)
    ;               reduce using rule 50 (declarator -> declarator_of_id .)


state 107

    (48) declarators -> declarator . , declarators
    (49) declarators -> declarator .

    ,               shift and go to state 124
    ;               reduce using rule 49 (declarators -> declarator .)


state 108

    (52) declarator_of_id -> ID .
    (53) assigment -> ID . = expression

    ,               reduce using rule 52 (declarator_of_id -> ID .)
    ;               reduce using rule 52 (declarator_of_id -> ID .)
    =               shift and go to state 115


state 109

    (40) scene -> SCENE ( INTEGER , INTEGER ) { declarations object_body_rest . }

    }               shift and go to state 125


state 110

    (41) declarations -> declaration ; . declarations
    (41) declarations -> . declaration ; declarations
    (42) declarations -> .
    (47) declaration -> . type declarators
    (43) type -> . int_type
    (44) type -> . float_type
    (45) int_type -> . INT_TYPE
    (46) float_type -> . FLOAT_TYPE

    ID              reduce using rule 42 (declarations -> .)
    RECTANGLE       reduce using rule 42 (declarations -> .)
    CIRCLE          reduce using rule 42 (declarations -> .)
    OVAL            reduce using rule 42 (declarations -> .)
    INT_TYPE        shift and go to state 65
    FLOAT_TYPE      shift and go to state 63

    float_type                     shift and go to state 66
    declarations                   shift and go to state 126
    int_type                       shift and go to state 68
    declaration                    shift and go to state 69
    type                           shift and go to state 64

state 111

    (36) circle -> CIRCLE ( expression , . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 127
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 112

    (37) oval -> OVAL ( expression , . expression , expression , expression )
    (38) oval -> OVAL ( expression , . expression , expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 128
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 113

    (76) while_expr -> WHILE ( . expression ) { object_body_rest }
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    id_expr                        shift and go to state 43
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    expression                     shift and go to state 129

state 114

    (7) block -> assigment ; .

    ID              reduce using rule 7 (block -> assigment ; .)
    IF              reduce using rule 7 (block -> assigment ; .)
    WHILE           reduce using rule 7 (block -> assigment ; .)
    RECTANGLE       reduce using rule 7 (block -> assigment ; .)
    CIRCLE          reduce using rule 7 (block -> assigment ; .)
    OVAL            reduce using rule 7 (block -> assigment ; .)
    }               reduce using rule 7 (block -> assigment ; .)


state 115

    (53) assigment -> ID = . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 130
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 116

    (74) if_expr -> IF ( . expression ) { object_body_rest }
    (75) if_expr -> IF ( . expression ) { object_body_rest } ELSE { object_body_rest }
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    id_expr                        shift and go to state 43
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    expression                     shift and go to state 131

state 117

    (24) rotate_node -> ROTATE ( . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 132
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 118

    (26) color_node -> COLOR ( . expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 133
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 119

    (27) scale_node -> SCALE ( . expression )
    (28) scale_node -> SCALE ( . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 134
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 120

    (18) transformation_nodes -> transformation_node ; . transformation_nodes
    (19) transformation_nodes -> transformation_node ; .
    (18) transformation_nodes -> . transformation_node ; transformation_nodes
    (19) transformation_nodes -> . transformation_node ;
    (20) transformation_node -> . rotate_node
    (21) transformation_node -> . translation_node
    (22) transformation_node -> . scale_node
    (23) transformation_node -> . color_node
    (24) rotate_node -> . ROTATE ( expression )
    (25) translation_node -> . TRANSLATE ( expression , expression )
    (27) scale_node -> . SCALE ( expression )
    (28) scale_node -> . SCALE ( expression , expression )
    (26) color_node -> . COLOR ( expression , expression , expression )

    ID              reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    IF              reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    WHILE           reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    RECTANGLE       reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    CIRCLE          reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    OVAL            reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    }               reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    ROTATE          shift and go to state 80
    TRANSLATE       shift and go to state 88
    SCALE           shift and go to state 85
    COLOR           shift and go to state 84

    scale_node                     shift and go to state 81
    transformation_node            shift and go to state 87
    translation_node               shift and go to state 83
    color_node                     shift and go to state 86
    transformation_nodes           shift and go to state 135
    rotate_node                    shift and go to state 89

state 121

    (25) translation_node -> TRANSLATE ( . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 136
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 122

    (34) rectangle -> RECTANGLE ( expression , . expression , expression , expression )
    (35) rectangle -> RECTANGLE ( expression , . expression , expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 137
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 123

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 138
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 124

    (48) declarators -> declarator , . declarators
    (48) declarators -> . declarator , declarators
    (49) declarators -> . declarator
    (50) declarator -> . declarator_of_id
    (51) declarator -> . assigment
    (52) declarator_of_id -> . ID
    (53) assigment -> . ID = expression

    ID              shift and go to state 108

    declarators                    shift and go to state 139
    declarator_of_id               shift and go to state 106
    assigment                      shift and go to state 104
    declarator                     shift and go to state 107

state 125

    (40) scene -> SCENE ( INTEGER , INTEGER ) { declarations object_body_rest } .

    $end            reduce using rule 40 (scene -> SCENE ( INTEGER , INTEGER ) { declarations object_body_rest } .)


state 126

    (41) declarations -> declaration ; declarations .

    ID              reduce using rule 41 (declarations -> declaration ; declarations .)
    RECTANGLE       reduce using rule 41 (declarations -> declaration ; declarations .)
    CIRCLE          reduce using rule 41 (declarations -> declaration ; declarations .)
    OVAL            reduce using rule 41 (declarations -> declaration ; declarations .)


state 127

    (36) circle -> CIRCLE ( expression , expression . , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 140
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 128

    (37) oval -> OVAL ( expression , expression . , expression , expression )
    (38) oval -> OVAL ( expression , expression . , expression , expression , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 141
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 129

    (76) while_expr -> WHILE ( expression . ) { object_body_rest }
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 142
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 130

    (53) assigment -> ID = expression .
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               reduce using rule 53 (assigment -> ID = expression .)
    ;               reduce using rule 53 (assigment -> ID = expression .)
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 131

    (74) if_expr -> IF ( expression . ) { object_body_rest }
    (75) if_expr -> IF ( expression . ) { object_body_rest } ELSE { object_body_rest }
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 143
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 132

    (24) rotate_node -> ROTATE ( expression . )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 144
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 133

    (26) color_node -> COLOR ( expression . , expression , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 145
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 134

    (27) scale_node -> SCALE ( expression . )
    (28) scale_node -> SCALE ( expression . , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 146
    ,               shift and go to state 147
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 135

    (18) transformation_nodes -> transformation_node ; transformation_nodes .

    ID              reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    IF              reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    WHILE           reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    RECTANGLE       reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    CIRCLE          reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    OVAL            reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    }               reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)


state 136

    (25) translation_node -> TRANSLATE ( expression . , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 148
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 137

    (34) rectangle -> RECTANGLE ( expression , expression . , expression , expression )
    (35) rectangle -> RECTANGLE ( expression , expression . , expression , expression , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 149
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 138

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression , expression . )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 150
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 139

    (48) declarators -> declarator , declarators .

    ;               reduce using rule 48 (declarators -> declarator , declarators .)


state 140

    (36) circle -> CIRCLE ( expression , expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 151
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 141

    (37) oval -> OVAL ( expression , expression , . expression , expression )
    (38) oval -> OVAL ( expression , expression , . expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 152
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 142

    (76) while_expr -> WHILE ( expression ) . { object_body_rest }

    {               shift and go to state 153


state 143

    (74) if_expr -> IF ( expression ) . { object_body_rest }
    (75) if_expr -> IF ( expression ) . { object_body_rest } ELSE { object_body_rest }

    {               shift and go to state 154


state 144

    (24) rotate_node -> ROTATE ( expression ) .

    ;               reduce using rule 24 (rotate_node -> ROTATE ( expression ) .)


state 145

    (26) color_node -> COLOR ( expression , . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 155
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 146

    (27) scale_node -> SCALE ( expression ) .

    ;               reduce using rule 27 (scale_node -> SCALE ( expression ) .)


state 147

    (28) scale_node -> SCALE ( expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 156
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 148

    (25) translation_node -> TRANSLATE ( expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 157
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 149

    (34) rectangle -> RECTANGLE ( expression , expression , . expression , expression )
    (35) rectangle -> RECTANGLE ( expression , expression , . expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 158
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 150

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression , expression ) .

    ;               reduce using rule 6 (default_color_definition -> DEFAULT_COLOR ( expression , expression , expression ) .)


state 151

    (36) circle -> CIRCLE ( expression , expression , expression . )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 159
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 152

    (37) oval -> OVAL ( expression , expression , expression . , expression )
    (38) oval -> OVAL ( expression , expression , expression . , expression , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 160
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 153

    (76) while_expr -> WHILE ( expression ) { . object_body_rest }
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    ID              shift and go to state 24
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    primitive                      shift and go to state 20
    oval                           shift and go to state 23
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 161
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    rectangle                      shift and go to state 32

state 154

    (74) if_expr -> IF ( expression ) { . object_body_rest }
    (75) if_expr -> IF ( expression ) { . object_body_rest } ELSE { object_body_rest }
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    ID              shift and go to state 24
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    primitive                      shift and go to state 20
    oval                           shift and go to state 23
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 162
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    rectangle                      shift and go to state 32

state 155

    (26) color_node -> COLOR ( expression , expression . , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 163
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 156

    (28) scale_node -> SCALE ( expression , expression . )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 164
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 157

    (25) translation_node -> TRANSLATE ( expression , expression . )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 165
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 158

    (34) rectangle -> RECTANGLE ( expression , expression , expression . , expression )
    (35) rectangle -> RECTANGLE ( expression , expression , expression . , expression , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    ,               shift and go to state 166
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 159

    (36) circle -> CIRCLE ( expression , expression , expression ) .

    ;               reduce using rule 36 (circle -> CIRCLE ( expression , expression , expression ) .)


state 160

    (37) oval -> OVAL ( expression , expression , expression , . expression )
    (38) oval -> OVAL ( expression , expression , expression , . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 167
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 161

    (76) while_expr -> WHILE ( expression ) { object_body_rest . }

    }               shift and go to state 168


state 162

    (74) if_expr -> IF ( expression ) { object_body_rest . }
    (75) if_expr -> IF ( expression ) { object_body_rest . } ELSE { object_body_rest }

    }               shift and go to state 169


state 163

    (26) color_node -> COLOR ( expression , expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 170
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 164

    (28) scale_node -> SCALE ( expression , expression ) .

    ;               reduce using rule 28 (scale_node -> SCALE ( expression , expression ) .)


state 165

    (25) translation_node -> TRANSLATE ( expression , expression ) .

    ;               reduce using rule 25 (translation_node -> TRANSLATE ( expression , expression ) .)


state 166

    (34) rectangle -> RECTANGLE ( expression , expression , expression , . expression )
    (35) rectangle -> RECTANGLE ( expression , expression , expression , . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 171
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 167

    (37) oval -> OVAL ( expression , expression , expression , expression . )
    (38) oval -> OVAL ( expression , expression , expression , expression . , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 172
    ,               shift and go to state 173
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 168

    (76) while_expr -> WHILE ( expression ) { object_body_rest } .

    ID              reduce using rule 76 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    IF              reduce using rule 76 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    WHILE           reduce using rule 76 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    RECTANGLE       reduce using rule 76 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    CIRCLE          reduce using rule 76 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    OVAL            reduce using rule 76 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    }               reduce using rule 76 (while_expr -> WHILE ( expression ) { object_body_rest } .)


state 169

    (74) if_expr -> IF ( expression ) { object_body_rest } .
    (75) if_expr -> IF ( expression ) { object_body_rest } . ELSE { object_body_rest }

    ID              reduce using rule 74 (if_expr -> IF ( expression ) { object_body_rest } .)
    IF              reduce using rule 74 (if_expr -> IF ( expression ) { object_body_rest } .)
    WHILE           reduce using rule 74 (if_expr -> IF ( expression ) { object_body_rest } .)
    RECTANGLE       reduce using rule 74 (if_expr -> IF ( expression ) { object_body_rest } .)
    CIRCLE          reduce using rule 74 (if_expr -> IF ( expression ) { object_body_rest } .)
    OVAL            reduce using rule 74 (if_expr -> IF ( expression ) { object_body_rest } .)
    }               reduce using rule 74 (if_expr -> IF ( expression ) { object_body_rest } .)
    ELSE            shift and go to state 174


state 170

    (26) color_node -> COLOR ( expression , expression , expression . )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 175
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 171

    (34) rectangle -> RECTANGLE ( expression , expression , expression , expression . )
    (35) rectangle -> RECTANGLE ( expression , expression , expression , expression . , expression )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 176
    ,               shift and go to state 177
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 172

    (37) oval -> OVAL ( expression , expression , expression , expression ) .

    ;               reduce using rule 37 (oval -> OVAL ( expression , expression , expression , expression ) .)


state 173

    (38) oval -> OVAL ( expression , expression , expression , expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 178
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 174

    (75) if_expr -> IF ( expression ) { object_body_rest } ELSE . { object_body_rest }

    {               shift and go to state 179


state 175

    (26) color_node -> COLOR ( expression , expression , expression ) .

    ;               reduce using rule 26 (color_node -> COLOR ( expression , expression , expression ) .)


state 176

    (34) rectangle -> RECTANGLE ( expression , expression , expression , expression ) .

    ;               reduce using rule 34 (rectangle -> RECTANGLE ( expression , expression , expression , expression ) .)


state 177

    (35) rectangle -> RECTANGLE ( expression , expression , expression , expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression + expression
    (64) two_arg_expr -> . expression - expression
    (65) two_arg_expr -> . expression * expression
    (66) two_arg_expr -> . expression / expression
    (67) two_arg_expr -> . expression L expression
    (68) two_arg_expr -> . expression LE expression
    (69) two_arg_expr -> . expression G expression
    (70) two_arg_expr -> . expression GE expression
    (71) two_arg_expr -> . expression EQ expression
    (72) two_arg_expr -> . expression NE expression
    (73) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 39
    (               shift and go to state 34
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 42

    int_const_expr                 shift and go to state 37
    float_const_expr               shift and go to state 38
    expr_in_brackets               shift and go to state 40
    expression                     shift and go to state 180
    const_expr                     shift and go to state 33
    two_arg_expr                   shift and go to state 35
    id_expr                        shift and go to state 43

state 178

    (38) oval -> OVAL ( expression , expression , expression , expression , expression . )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 181
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 179

    (75) if_expr -> IF ( expression ) { object_body_rest } ELSE { . object_body_rest }
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    ID              shift and go to state 24
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    primitive                      shift and go to state 20
    oval                           shift and go to state 23
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 182
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    rectangle                      shift and go to state 32

state 180

    (35) rectangle -> RECTANGLE ( expression , expression , expression , expression , expression . )
    (63) two_arg_expr -> expression . + expression
    (64) two_arg_expr -> expression . - expression
    (65) two_arg_expr -> expression . * expression
    (66) two_arg_expr -> expression . / expression
    (67) two_arg_expr -> expression . L expression
    (68) two_arg_expr -> expression . LE expression
    (69) two_arg_expr -> expression . G expression
    (70) two_arg_expr -> expression . GE expression
    (71) two_arg_expr -> expression . EQ expression
    (72) two_arg_expr -> expression . NE expression

    )               shift and go to state 183
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54


state 181

    (38) oval -> OVAL ( expression , expression , expression , expression , expression ) .

    ;               reduce using rule 38 (oval -> OVAL ( expression , expression , expression , expression , expression ) .)


state 182

    (75) if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest . }

    }               shift and go to state 184


state 183

    (35) rectangle -> RECTANGLE ( expression , expression , expression , expression , expression ) .

    ;               reduce using rule 35 (rectangle -> RECTANGLE ( expression , expression , expression , expression , expression ) .)


state 184

    (75) if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .

    ID              reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    IF              reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    WHILE           reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    RECTANGLE       reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    CIRCLE          reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    OVAL            reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    }               reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 93 resolved as shift
WARNING: shift/reduce conflict for - in state 93 resolved as shift
WARNING: shift/reduce conflict for * in state 93 resolved as shift
WARNING: shift/reduce conflict for / in state 93 resolved as shift
WARNING: shift/reduce conflict for L in state 93 resolved as shift
WARNING: shift/reduce conflict for LE in state 93 resolved as shift
WARNING: shift/reduce conflict for G in state 93 resolved as shift
WARNING: shift/reduce conflict for GE in state 93 resolved as shift
WARNING: shift/reduce conflict for EQ in state 93 resolved as shift
WARNING: shift/reduce conflict for NE in state 93 resolved as shift
WARNING: shift/reduce conflict for + in state 94 resolved as shift
WARNING: shift/reduce conflict for - in state 94 resolved as shift
WARNING: shift/reduce conflict for * in state 94 resolved as shift
WARNING: shift/reduce conflict for / in state 94 resolved as shift
WARNING: shift/reduce conflict for L in state 94 resolved as shift
WARNING: shift/reduce conflict for LE in state 94 resolved as shift
WARNING: shift/reduce conflict for G in state 94 resolved as shift
WARNING: shift/reduce conflict for GE in state 94 resolved as shift
WARNING: shift/reduce conflict for EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for NE in state 94 resolved as shift
WARNING: shift/reduce conflict for + in state 95 resolved as shift
WARNING: shift/reduce conflict for - in state 95 resolved as shift
WARNING: shift/reduce conflict for * in state 95 resolved as shift
WARNING: shift/reduce conflict for / in state 95 resolved as shift
WARNING: shift/reduce conflict for L in state 95 resolved as shift
WARNING: shift/reduce conflict for LE in state 95 resolved as shift
WARNING: shift/reduce conflict for G in state 95 resolved as shift
WARNING: shift/reduce conflict for GE in state 95 resolved as shift
WARNING: shift/reduce conflict for EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for NE in state 95 resolved as shift
WARNING: shift/reduce conflict for + in state 96 resolved as shift
WARNING: shift/reduce conflict for - in state 96 resolved as shift
WARNING: shift/reduce conflict for * in state 96 resolved as shift
WARNING: shift/reduce conflict for / in state 96 resolved as shift
WARNING: shift/reduce conflict for L in state 96 resolved as shift
WARNING: shift/reduce conflict for LE in state 96 resolved as shift
WARNING: shift/reduce conflict for G in state 96 resolved as shift
WARNING: shift/reduce conflict for GE in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for NE in state 96 resolved as shift
WARNING: shift/reduce conflict for + in state 101 resolved as shift
WARNING: shift/reduce conflict for - in state 101 resolved as shift
WARNING: shift/reduce conflict for * in state 101 resolved as shift
WARNING: shift/reduce conflict for / in state 101 resolved as shift
WARNING: shift/reduce conflict for L in state 101 resolved as shift
WARNING: shift/reduce conflict for LE in state 101 resolved as shift
WARNING: shift/reduce conflict for G in state 101 resolved as shift
WARNING: shift/reduce conflict for GE in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NE in state 101 resolved as shift
WARNING: shift/reduce conflict for + in state 102 resolved as shift
WARNING: shift/reduce conflict for - in state 102 resolved as shift
WARNING: shift/reduce conflict for * in state 102 resolved as shift
WARNING: shift/reduce conflict for / in state 102 resolved as shift
WARNING: shift/reduce conflict for L in state 102 resolved as shift
WARNING: shift/reduce conflict for LE in state 102 resolved as shift
WARNING: shift/reduce conflict for G in state 102 resolved as shift
WARNING: shift/reduce conflict for GE in state 102 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NE in state 102 resolved as shift
