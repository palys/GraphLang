Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    XOR
    STRING
    AND
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> objects_definitions scene
Rule 2     objects_definitions -> objects_definitions object_definition
Rule 3     objects_definitions -> <empty>
Rule 4     object_definition -> DEF ID { object_body }
Rule 5     object_body -> default_color_definition ; object_body_rest
Rule 6     default_color_definition -> DEFAULT_COLOR ( expression , expression , expression )
Rule 7     block -> assigment ;
Rule 8     block -> if_expr
Rule 9     block -> while_expr
Rule 10    blocks -> blocks block
Rule 11    blocks -> <empty>
Rule 12    object_body_rest -> shape_with_transformations blocks object_body_rest
Rule 13    object_body_rest -> shape_with_transformations blocks
Rule 14    object_body_rest -> shape_without_transformations blocks object_body_rest
Rule 15    object_body_rest -> shape_without_transformations blocks
Rule 16    shape_with_transformations -> shape ; transformation_nodes
Rule 17    shape_without_transformations -> shape ;
Rule 18    transformation_nodes -> transformation_node ; transformation_nodes
Rule 19    transformation_nodes -> transformation_node ;
Rule 20    transformation_node -> rotate_node
Rule 21    transformation_node -> translation_node
Rule 22    transformation_node -> scale_node
Rule 23    transformation_node -> color_node
Rule 24    rotate_node -> ROTATE ( expression )
Rule 25    translation_node -> TRANSLATE ( expression , expression )
Rule 26    color_node -> COLOR ( expression , expression , expression )
Rule 27    scale_node -> SCALE ( expression )
Rule 28    scale_node -> SCALE ( expression , expression )
Rule 29    shape -> primitive
Rule 30    shape -> usage
Rule 31    primitive -> rectangle
Rule 32    primitive -> circle
Rule 33    primitive -> oval
Rule 34    rectangle -> RECTANGLE ( expression , expression , expression , expression )
Rule 35    rectangle -> RECTANGLE ( expression , expression , expression , expression , expression )
Rule 36    circle -> CIRCLE ( expression , expression , expression )
Rule 37    oval -> OVAL ( expression , expression , expression , expression )
Rule 38    oval -> OVAL ( expression , expression , expression , expression , expression )
Rule 39    usage -> ID
Rule 40    scene -> SCENE ( INTEGER , INTEGER ) { declarations object_body_rest }
Rule 41    declarations -> declaration ; declarations
Rule 42    declarations -> <empty>
Rule 43    type -> int_type
Rule 44    type -> float_type
Rule 45    int_type -> INT_TYPE
Rule 46    float_type -> FLOAT_TYPE
Rule 47    declaration -> type declarators
Rule 48    declarators -> declarator , declarators
Rule 49    declarators -> declarator
Rule 50    declarator -> declarator_of_id
Rule 51    declarator -> assigment
Rule 52    declarator_of_id -> ID
Rule 53    assigment -> ID = expression
Rule 54    expression -> const_expr
Rule 55    expression -> id_expr
Rule 56    expression -> two_arg_expr
Rule 57    expression -> expr_in_brackets
Rule 58    const_expr -> int_const_expr
Rule 59    const_expr -> float_const_expr
Rule 60    float_const_expr -> FLOAT
Rule 61    int_const_expr -> INTEGER
Rule 62    id_expr -> ID
Rule 63    two_arg_expr -> expression operator expression
Rule 64    operator -> +
Rule 65    operator -> -
Rule 66    operator -> *
Rule 67    operator -> /
Rule 68    operator -> L
Rule 69    operator -> LE
Rule 70    operator -> G
Rule 71    operator -> GE
Rule 72    operator -> EQ
Rule 73    operator -> NE
Rule 74    expr_in_brackets -> ( expression )
Rule 75    if_expr -> IF ( expression ) { object_body_rest }
Rule 76    if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest }
Rule 77    while_expr -> WHILE ( expression ) { object_body_rest }

Terminals, with rules where they appear

(                    : 6 24 25 26 27 28 34 35 36 37 38 40 74 75 76 77
)                    : 6 24 25 26 27 28 34 35 36 37 38 40 74 75 76 77
*                    : 66
+                    : 64
,                    : 6 6 25 26 26 28 34 34 34 35 35 35 35 36 36 37 37 37 38 38 38 38 40 48
-                    : 65
/                    : 67
;                    : 5 7 16 17 18 19 41
=                    : 53
AND                  : 
CIRCLE               : 36
COLOR                : 26
DEF                  : 4
DEFAULT_COLOR        : 6
ELSE                 : 76
EQ                   : 72
FLOAT                : 60
FLOAT_TYPE           : 46
G                    : 70
GE                   : 71
ID                   : 4 39 52 53 62
IF                   : 75 76
INTEGER              : 40 40 61
INT_TYPE             : 45
L                    : 68
LE                   : 69
NE                   : 73
OR                   : 
OVAL                 : 37 38
RECTANGLE            : 34 35
ROTATE               : 24
SCALE                : 27 28
SCENE                : 40
STRING               : 
TRANSLATE            : 25
WHILE                : 77
XOR                  : 
error                : 
{                    : 4 40 75 76 76 77
}                    : 4 40 75 76 76 77

Nonterminals, with rules where they appear

assigment            : 7 51
block                : 10
blocks               : 10 12 13 14 15
circle               : 32
color_node           : 23
const_expr           : 54
declaration          : 41
declarations         : 40 41
declarator           : 48 49
declarator_of_id     : 50
declarators          : 47 48
default_color_definition : 5
expr_in_brackets     : 57
expression           : 6 6 6 24 25 25 26 26 26 27 28 28 34 34 34 34 35 35 35 35 35 36 36 36 37 37 37 37 38 38 38 38 38 53 63 63 74 75 76 77
float_const_expr     : 59
float_type           : 44
id_expr              : 55
if_expr              : 8
int_const_expr       : 58
int_type             : 43
object_body          : 4
object_body_rest     : 5 12 14 40 75 76 76 77
object_definition    : 2
objects_definitions  : 1 2
operator             : 63
oval                 : 33
primitive            : 29
program              : 0
rectangle            : 31
rotate_node          : 20
scale_node           : 22
scene                : 1
shape                : 16 17
shape_with_transformations : 12 13
shape_without_transformations : 14 15
transformation_node  : 18 19
transformation_nodes : 16 18
translation_node     : 21
two_arg_expr         : 56
type                 : 47
usage                : 30
while_expr           : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . objects_definitions scene
    (2) objects_definitions -> . objects_definitions object_definition
    (3) objects_definitions -> .

    SCENE           reduce using rule 3 (objects_definitions -> .)
    DEF             reduce using rule 3 (objects_definitions -> .)

    program                        shift and go to state 1
    objects_definitions            shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> objects_definitions . scene
    (2) objects_definitions -> objects_definitions . object_definition
    (40) scene -> . SCENE ( INTEGER , INTEGER ) { declarations object_body_rest }
    (4) object_definition -> . DEF ID { object_body }

    SCENE           shift and go to state 4
    DEF             shift and go to state 6

    scene                          shift and go to state 3
    object_definition              shift and go to state 5

state 3

    (1) program -> objects_definitions scene .

    $end            reduce using rule 1 (program -> objects_definitions scene .)


state 4

    (40) scene -> SCENE . ( INTEGER , INTEGER ) { declarations object_body_rest }

    (               shift and go to state 7


state 5

    (2) objects_definitions -> objects_definitions object_definition .

    SCENE           reduce using rule 2 (objects_definitions -> objects_definitions object_definition .)
    DEF             reduce using rule 2 (objects_definitions -> objects_definitions object_definition .)


state 6

    (4) object_definition -> DEF . ID { object_body }

    ID              shift and go to state 8


state 7

    (40) scene -> SCENE ( . INTEGER , INTEGER ) { declarations object_body_rest }

    INTEGER         shift and go to state 9


state 8

    (4) object_definition -> DEF ID . { object_body }

    {               shift and go to state 10


state 9

    (40) scene -> SCENE ( INTEGER . , INTEGER ) { declarations object_body_rest }

    ,               shift and go to state 11


state 10

    (4) object_definition -> DEF ID { . object_body }
    (5) object_body -> . default_color_definition ; object_body_rest
    (6) default_color_definition -> . DEFAULT_COLOR ( expression , expression , expression )

    DEFAULT_COLOR   shift and go to state 13

    default_color_definition       shift and go to state 12
    object_body                    shift and go to state 14

state 11

    (40) scene -> SCENE ( INTEGER , . INTEGER ) { declarations object_body_rest }

    INTEGER         shift and go to state 15


state 12

    (5) object_body -> default_color_definition . ; object_body_rest

    ;               shift and go to state 16


state 13

    (6) default_color_definition -> DEFAULT_COLOR . ( expression , expression , expression )

    (               shift and go to state 17


state 14

    (4) object_definition -> DEF ID { object_body . }

    }               shift and go to state 18


state 15

    (40) scene -> SCENE ( INTEGER , INTEGER . ) { declarations object_body_rest }

    )               shift and go to state 19


state 16

    (5) object_body -> default_color_definition ; . object_body_rest
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    ID              shift and go to state 24
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    primitive                      shift and go to state 20
    oval                           shift and go to state 23
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 26
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    rectangle                      shift and go to state 32

state 17

    (6) default_color_definition -> DEFAULT_COLOR ( . expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 42
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 18

    (4) object_definition -> DEF ID { object_body } .

    SCENE           reduce using rule 4 (object_definition -> DEF ID { object_body } .)
    DEF             reduce using rule 4 (object_definition -> DEF ID { object_body } .)


state 19

    (40) scene -> SCENE ( INTEGER , INTEGER ) . { declarations object_body_rest }

    {               shift and go to state 44


state 20

    (29) shape -> primitive .

    ;               reduce using rule 29 (shape -> primitive .)


state 21

    (36) circle -> CIRCLE . ( expression , expression , expression )

    (               shift and go to state 45


state 22

    (37) oval -> OVAL . ( expression , expression , expression , expression )
    (38) oval -> OVAL . ( expression , expression , expression , expression , expression )

    (               shift and go to state 46


state 23

    (33) primitive -> oval .

    ;               reduce using rule 33 (primitive -> oval .)


state 24

    (39) usage -> ID .

    ;               reduce using rule 39 (usage -> ID .)


state 25

    (14) object_body_rest -> shape_without_transformations . blocks object_body_rest
    (15) object_body_rest -> shape_without_transformations . blocks
    (10) blocks -> . blocks block
    (11) blocks -> .

    ID              reduce using rule 11 (blocks -> .)
    IF              reduce using rule 11 (blocks -> .)
    WHILE           reduce using rule 11 (blocks -> .)
    RECTANGLE       reduce using rule 11 (blocks -> .)
    CIRCLE          reduce using rule 11 (blocks -> .)
    OVAL            reduce using rule 11 (blocks -> .)
    }               reduce using rule 11 (blocks -> .)

    blocks                         shift and go to state 47

state 26

    (5) object_body -> default_color_definition ; object_body_rest .

    }               reduce using rule 5 (object_body -> default_color_definition ; object_body_rest .)


state 27

    (16) shape_with_transformations -> shape . ; transformation_nodes
    (17) shape_without_transformations -> shape . ;

    ;               shift and go to state 48


state 28

    (12) object_body_rest -> shape_with_transformations . blocks object_body_rest
    (13) object_body_rest -> shape_with_transformations . blocks
    (10) blocks -> . blocks block
    (11) blocks -> .

    ID              reduce using rule 11 (blocks -> .)
    IF              reduce using rule 11 (blocks -> .)
    WHILE           reduce using rule 11 (blocks -> .)
    RECTANGLE       reduce using rule 11 (blocks -> .)
    CIRCLE          reduce using rule 11 (blocks -> .)
    OVAL            reduce using rule 11 (blocks -> .)
    }               reduce using rule 11 (blocks -> .)

    blocks                         shift and go to state 49

state 29

    (34) rectangle -> RECTANGLE . ( expression , expression , expression , expression )
    (35) rectangle -> RECTANGLE . ( expression , expression , expression , expression , expression )

    (               shift and go to state 50


state 30

    (30) shape -> usage .

    ;               reduce using rule 30 (shape -> usage .)


state 31

    (32) primitive -> circle .

    ;               reduce using rule 32 (primitive -> circle .)


state 32

    (31) primitive -> rectangle .

    ;               reduce using rule 31 (primitive -> rectangle .)


state 33

    (58) const_expr -> int_const_expr .

    ,               reduce using rule 58 (const_expr -> int_const_expr .)
    +               reduce using rule 58 (const_expr -> int_const_expr .)
    -               reduce using rule 58 (const_expr -> int_const_expr .)
    *               reduce using rule 58 (const_expr -> int_const_expr .)
    /               reduce using rule 58 (const_expr -> int_const_expr .)
    L               reduce using rule 58 (const_expr -> int_const_expr .)
    LE              reduce using rule 58 (const_expr -> int_const_expr .)
    G               reduce using rule 58 (const_expr -> int_const_expr .)
    GE              reduce using rule 58 (const_expr -> int_const_expr .)
    EQ              reduce using rule 58 (const_expr -> int_const_expr .)
    NE              reduce using rule 58 (const_expr -> int_const_expr .)
    )               reduce using rule 58 (const_expr -> int_const_expr .)
    ;               reduce using rule 58 (const_expr -> int_const_expr .)


state 34

    (60) float_const_expr -> FLOAT .

    ,               reduce using rule 60 (float_const_expr -> FLOAT .)
    +               reduce using rule 60 (float_const_expr -> FLOAT .)
    -               reduce using rule 60 (float_const_expr -> FLOAT .)
    *               reduce using rule 60 (float_const_expr -> FLOAT .)
    /               reduce using rule 60 (float_const_expr -> FLOAT .)
    L               reduce using rule 60 (float_const_expr -> FLOAT .)
    LE              reduce using rule 60 (float_const_expr -> FLOAT .)
    G               reduce using rule 60 (float_const_expr -> FLOAT .)
    GE              reduce using rule 60 (float_const_expr -> FLOAT .)
    EQ              reduce using rule 60 (float_const_expr -> FLOAT .)
    NE              reduce using rule 60 (float_const_expr -> FLOAT .)
    )               reduce using rule 60 (float_const_expr -> FLOAT .)
    ;               reduce using rule 60 (float_const_expr -> FLOAT .)


state 35

    (59) const_expr -> float_const_expr .

    ,               reduce using rule 59 (const_expr -> float_const_expr .)
    +               reduce using rule 59 (const_expr -> float_const_expr .)
    -               reduce using rule 59 (const_expr -> float_const_expr .)
    *               reduce using rule 59 (const_expr -> float_const_expr .)
    /               reduce using rule 59 (const_expr -> float_const_expr .)
    L               reduce using rule 59 (const_expr -> float_const_expr .)
    LE              reduce using rule 59 (const_expr -> float_const_expr .)
    G               reduce using rule 59 (const_expr -> float_const_expr .)
    GE              reduce using rule 59 (const_expr -> float_const_expr .)
    EQ              reduce using rule 59 (const_expr -> float_const_expr .)
    NE              reduce using rule 59 (const_expr -> float_const_expr .)
    )               reduce using rule 59 (const_expr -> float_const_expr .)
    ;               reduce using rule 59 (const_expr -> float_const_expr .)


state 36

    (57) expression -> expr_in_brackets .

    ,               reduce using rule 57 (expression -> expr_in_brackets .)
    +               reduce using rule 57 (expression -> expr_in_brackets .)
    -               reduce using rule 57 (expression -> expr_in_brackets .)
    *               reduce using rule 57 (expression -> expr_in_brackets .)
    /               reduce using rule 57 (expression -> expr_in_brackets .)
    L               reduce using rule 57 (expression -> expr_in_brackets .)
    LE              reduce using rule 57 (expression -> expr_in_brackets .)
    G               reduce using rule 57 (expression -> expr_in_brackets .)
    GE              reduce using rule 57 (expression -> expr_in_brackets .)
    EQ              reduce using rule 57 (expression -> expr_in_brackets .)
    NE              reduce using rule 57 (expression -> expr_in_brackets .)
    ;               reduce using rule 57 (expression -> expr_in_brackets .)
    )               reduce using rule 57 (expression -> expr_in_brackets .)


state 37

    (74) expr_in_brackets -> ( . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 51
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 38

    (54) expression -> const_expr .

    ,               reduce using rule 54 (expression -> const_expr .)
    +               reduce using rule 54 (expression -> const_expr .)
    -               reduce using rule 54 (expression -> const_expr .)
    *               reduce using rule 54 (expression -> const_expr .)
    /               reduce using rule 54 (expression -> const_expr .)
    L               reduce using rule 54 (expression -> const_expr .)
    LE              reduce using rule 54 (expression -> const_expr .)
    G               reduce using rule 54 (expression -> const_expr .)
    GE              reduce using rule 54 (expression -> const_expr .)
    EQ              reduce using rule 54 (expression -> const_expr .)
    NE              reduce using rule 54 (expression -> const_expr .)
    ;               reduce using rule 54 (expression -> const_expr .)
    )               reduce using rule 54 (expression -> const_expr .)


state 39

    (56) expression -> two_arg_expr .

    ,               reduce using rule 56 (expression -> two_arg_expr .)
    +               reduce using rule 56 (expression -> two_arg_expr .)
    -               reduce using rule 56 (expression -> two_arg_expr .)
    *               reduce using rule 56 (expression -> two_arg_expr .)
    /               reduce using rule 56 (expression -> two_arg_expr .)
    L               reduce using rule 56 (expression -> two_arg_expr .)
    LE              reduce using rule 56 (expression -> two_arg_expr .)
    G               reduce using rule 56 (expression -> two_arg_expr .)
    GE              reduce using rule 56 (expression -> two_arg_expr .)
    EQ              reduce using rule 56 (expression -> two_arg_expr .)
    NE              reduce using rule 56 (expression -> two_arg_expr .)
    ;               reduce using rule 56 (expression -> two_arg_expr .)
    )               reduce using rule 56 (expression -> two_arg_expr .)


state 40

    (55) expression -> id_expr .

    ,               reduce using rule 55 (expression -> id_expr .)
    +               reduce using rule 55 (expression -> id_expr .)
    -               reduce using rule 55 (expression -> id_expr .)
    *               reduce using rule 55 (expression -> id_expr .)
    /               reduce using rule 55 (expression -> id_expr .)
    L               reduce using rule 55 (expression -> id_expr .)
    LE              reduce using rule 55 (expression -> id_expr .)
    G               reduce using rule 55 (expression -> id_expr .)
    GE              reduce using rule 55 (expression -> id_expr .)
    EQ              reduce using rule 55 (expression -> id_expr .)
    NE              reduce using rule 55 (expression -> id_expr .)
    ;               reduce using rule 55 (expression -> id_expr .)
    )               reduce using rule 55 (expression -> id_expr .)


state 41

    (61) int_const_expr -> INTEGER .

    ,               reduce using rule 61 (int_const_expr -> INTEGER .)
    +               reduce using rule 61 (int_const_expr -> INTEGER .)
    -               reduce using rule 61 (int_const_expr -> INTEGER .)
    *               reduce using rule 61 (int_const_expr -> INTEGER .)
    /               reduce using rule 61 (int_const_expr -> INTEGER .)
    L               reduce using rule 61 (int_const_expr -> INTEGER .)
    LE              reduce using rule 61 (int_const_expr -> INTEGER .)
    G               reduce using rule 61 (int_const_expr -> INTEGER .)
    GE              reduce using rule 61 (int_const_expr -> INTEGER .)
    EQ              reduce using rule 61 (int_const_expr -> INTEGER .)
    NE              reduce using rule 61 (int_const_expr -> INTEGER .)
    )               reduce using rule 61 (int_const_expr -> INTEGER .)
    ;               reduce using rule 61 (int_const_expr -> INTEGER .)


state 42

    (6) default_color_definition -> DEFAULT_COLOR ( expression . , expression , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 59
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 43

    (62) id_expr -> ID .

    ,               reduce using rule 62 (id_expr -> ID .)
    +               reduce using rule 62 (id_expr -> ID .)
    -               reduce using rule 62 (id_expr -> ID .)
    *               reduce using rule 62 (id_expr -> ID .)
    /               reduce using rule 62 (id_expr -> ID .)
    L               reduce using rule 62 (id_expr -> ID .)
    LE              reduce using rule 62 (id_expr -> ID .)
    G               reduce using rule 62 (id_expr -> ID .)
    GE              reduce using rule 62 (id_expr -> ID .)
    EQ              reduce using rule 62 (id_expr -> ID .)
    NE              reduce using rule 62 (id_expr -> ID .)
    )               reduce using rule 62 (id_expr -> ID .)
    ;               reduce using rule 62 (id_expr -> ID .)


state 44

    (40) scene -> SCENE ( INTEGER , INTEGER ) { . declarations object_body_rest }
    (41) declarations -> . declaration ; declarations
    (42) declarations -> .
    (47) declaration -> . type declarators
    (43) type -> . int_type
    (44) type -> . float_type
    (45) int_type -> . INT_TYPE
    (46) float_type -> . FLOAT_TYPE

    ID              reduce using rule 42 (declarations -> .)
    RECTANGLE       reduce using rule 42 (declarations -> .)
    CIRCLE          reduce using rule 42 (declarations -> .)
    OVAL            reduce using rule 42 (declarations -> .)
    INT_TYPE        shift and go to state 66
    FLOAT_TYPE      shift and go to state 64

    float_type                     shift and go to state 67
    declarations                   shift and go to state 68
    int_type                       shift and go to state 69
    declaration                    shift and go to state 70
    type                           shift and go to state 65

state 45

    (36) circle -> CIRCLE ( . expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 71
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 46

    (37) oval -> OVAL ( . expression , expression , expression , expression )
    (38) oval -> OVAL ( . expression , expression , expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 72
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 47

    (14) object_body_rest -> shape_without_transformations blocks . object_body_rest
    (15) object_body_rest -> shape_without_transformations blocks .
    (10) blocks -> blocks . block
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (7) block -> . assigment ;
    (8) block -> . if_expr
    (9) block -> . while_expr
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (53) assigment -> . ID = expression
    (75) if_expr -> . IF ( expression ) { object_body_rest }
    (76) if_expr -> . IF ( expression ) { object_body_rest } ELSE { object_body_rest }
    (77) while_expr -> . WHILE ( expression ) { object_body_rest }
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    }               reduce using rule 15 (object_body_rest -> shape_without_transformations blocks .)
    ID              shift and go to state 77
    IF              shift and go to state 78
    WHILE           shift and go to state 74
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    if_expr                        shift and go to state 79
    assigment                      shift and go to state 75
    while_expr                     shift and go to state 76
    primitive                      shift and go to state 20
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 73
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    rectangle                      shift and go to state 32
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    oval                           shift and go to state 23
    block                          shift and go to state 80

state 48

    (16) shape_with_transformations -> shape ; . transformation_nodes
    (17) shape_without_transformations -> shape ; .
    (18) transformation_nodes -> . transformation_node ; transformation_nodes
    (19) transformation_nodes -> . transformation_node ;
    (20) transformation_node -> . rotate_node
    (21) transformation_node -> . translation_node
    (22) transformation_node -> . scale_node
    (23) transformation_node -> . color_node
    (24) rotate_node -> . ROTATE ( expression )
    (25) translation_node -> . TRANSLATE ( expression , expression )
    (27) scale_node -> . SCALE ( expression )
    (28) scale_node -> . SCALE ( expression , expression )
    (26) color_node -> . COLOR ( expression , expression , expression )

    ID              reduce using rule 17 (shape_without_transformations -> shape ; .)
    IF              reduce using rule 17 (shape_without_transformations -> shape ; .)
    WHILE           reduce using rule 17 (shape_without_transformations -> shape ; .)
    RECTANGLE       reduce using rule 17 (shape_without_transformations -> shape ; .)
    CIRCLE          reduce using rule 17 (shape_without_transformations -> shape ; .)
    OVAL            reduce using rule 17 (shape_without_transformations -> shape ; .)
    }               reduce using rule 17 (shape_without_transformations -> shape ; .)
    ROTATE          shift and go to state 81
    TRANSLATE       shift and go to state 89
    SCALE           shift and go to state 86
    COLOR           shift and go to state 85

    scale_node                     shift and go to state 82
    transformation_nodes           shift and go to state 83
    translation_node               shift and go to state 84
    color_node                     shift and go to state 87
    transformation_node            shift and go to state 88
    rotate_node                    shift and go to state 90

state 49

    (12) object_body_rest -> shape_with_transformations blocks . object_body_rest
    (13) object_body_rest -> shape_with_transformations blocks .
    (10) blocks -> blocks . block
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (7) block -> . assigment ;
    (8) block -> . if_expr
    (9) block -> . while_expr
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (53) assigment -> . ID = expression
    (75) if_expr -> . IF ( expression ) { object_body_rest }
    (76) if_expr -> . IF ( expression ) { object_body_rest } ELSE { object_body_rest }
    (77) while_expr -> . WHILE ( expression ) { object_body_rest }
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    }               reduce using rule 13 (object_body_rest -> shape_with_transformations blocks .)
    ID              shift and go to state 77
    IF              shift and go to state 78
    WHILE           shift and go to state 74
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    if_expr                        shift and go to state 79
    assigment                      shift and go to state 75
    while_expr                     shift and go to state 76
    primitive                      shift and go to state 20
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 91
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    rectangle                      shift and go to state 32
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    oval                           shift and go to state 23
    block                          shift and go to state 80

state 50

    (34) rectangle -> RECTANGLE ( . expression , expression , expression , expression )
    (35) rectangle -> RECTANGLE ( . expression , expression , expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 92
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 51

    (74) expr_in_brackets -> ( expression . )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 93
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 52

    (69) operator -> LE .

    ID              reduce using rule 69 (operator -> LE .)
    (               reduce using rule 69 (operator -> LE .)
    INTEGER         reduce using rule 69 (operator -> LE .)
    FLOAT           reduce using rule 69 (operator -> LE .)


state 53

    (72) operator -> EQ .

    ID              reduce using rule 72 (operator -> EQ .)
    (               reduce using rule 72 (operator -> EQ .)
    INTEGER         reduce using rule 72 (operator -> EQ .)
    FLOAT           reduce using rule 72 (operator -> EQ .)


state 54

    (73) operator -> NE .

    ID              reduce using rule 73 (operator -> NE .)
    (               reduce using rule 73 (operator -> NE .)
    INTEGER         reduce using rule 73 (operator -> NE .)
    FLOAT           reduce using rule 73 (operator -> NE .)


state 55

    (70) operator -> G .

    ID              reduce using rule 70 (operator -> G .)
    (               reduce using rule 70 (operator -> G .)
    INTEGER         reduce using rule 70 (operator -> G .)
    FLOAT           reduce using rule 70 (operator -> G .)


state 56

    (64) operator -> + .

    ID              reduce using rule 64 (operator -> + .)
    (               reduce using rule 64 (operator -> + .)
    INTEGER         reduce using rule 64 (operator -> + .)
    FLOAT           reduce using rule 64 (operator -> + .)


state 57

    (66) operator -> * .

    ID              reduce using rule 66 (operator -> * .)
    (               reduce using rule 66 (operator -> * .)
    INTEGER         reduce using rule 66 (operator -> * .)
    FLOAT           reduce using rule 66 (operator -> * .)


state 58

    (65) operator -> - .

    ID              reduce using rule 65 (operator -> - .)
    (               reduce using rule 65 (operator -> - .)
    INTEGER         reduce using rule 65 (operator -> - .)
    FLOAT           reduce using rule 65 (operator -> - .)


state 59

    (6) default_color_definition -> DEFAULT_COLOR ( expression , . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 94
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 60

    (68) operator -> L .

    ID              reduce using rule 68 (operator -> L .)
    (               reduce using rule 68 (operator -> L .)
    INTEGER         reduce using rule 68 (operator -> L .)
    FLOAT           reduce using rule 68 (operator -> L .)


state 61

    (71) operator -> GE .

    ID              reduce using rule 71 (operator -> GE .)
    (               reduce using rule 71 (operator -> GE .)
    INTEGER         reduce using rule 71 (operator -> GE .)
    FLOAT           reduce using rule 71 (operator -> GE .)


state 62

    (67) operator -> / .

    ID              reduce using rule 67 (operator -> / .)
    (               reduce using rule 67 (operator -> / .)
    INTEGER         reduce using rule 67 (operator -> / .)
    FLOAT           reduce using rule 67 (operator -> / .)


state 63

    (63) two_arg_expr -> expression operator . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 95
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 64

    (46) float_type -> FLOAT_TYPE .

    ID              reduce using rule 46 (float_type -> FLOAT_TYPE .)


state 65

    (47) declaration -> type . declarators
    (48) declarators -> . declarator , declarators
    (49) declarators -> . declarator
    (50) declarator -> . declarator_of_id
    (51) declarator -> . assigment
    (52) declarator_of_id -> . ID
    (53) assigment -> . ID = expression

    ID              shift and go to state 100

    assigment                      shift and go to state 96
    declarators                    shift and go to state 97
    declarator_of_id               shift and go to state 98
    declarator                     shift and go to state 99

state 66

    (45) int_type -> INT_TYPE .

    ID              reduce using rule 45 (int_type -> INT_TYPE .)


state 67

    (44) type -> float_type .

    ID              reduce using rule 44 (type -> float_type .)


state 68

    (40) scene -> SCENE ( INTEGER , INTEGER ) { declarations . object_body_rest }
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    ID              shift and go to state 24
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    primitive                      shift and go to state 20
    oval                           shift and go to state 23
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 101
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    rectangle                      shift and go to state 32

state 69

    (43) type -> int_type .

    ID              reduce using rule 43 (type -> int_type .)


state 70

    (41) declarations -> declaration . ; declarations

    ;               shift and go to state 102


state 71

    (36) circle -> CIRCLE ( expression . , expression , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 103
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 72

    (37) oval -> OVAL ( expression . , expression , expression , expression )
    (38) oval -> OVAL ( expression . , expression , expression , expression , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 104
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 73

    (14) object_body_rest -> shape_without_transformations blocks object_body_rest .

    }               reduce using rule 14 (object_body_rest -> shape_without_transformations blocks object_body_rest .)


state 74

    (77) while_expr -> WHILE . ( expression ) { object_body_rest }

    (               shift and go to state 105


state 75

    (7) block -> assigment . ;

    ;               shift and go to state 106


state 76

    (9) block -> while_expr .

    ID              reduce using rule 9 (block -> while_expr .)
    IF              reduce using rule 9 (block -> while_expr .)
    WHILE           reduce using rule 9 (block -> while_expr .)
    RECTANGLE       reduce using rule 9 (block -> while_expr .)
    CIRCLE          reduce using rule 9 (block -> while_expr .)
    OVAL            reduce using rule 9 (block -> while_expr .)
    }               reduce using rule 9 (block -> while_expr .)


state 77

    (53) assigment -> ID . = expression
    (39) usage -> ID .

    =               shift and go to state 107
    ;               reduce using rule 39 (usage -> ID .)


state 78

    (75) if_expr -> IF . ( expression ) { object_body_rest }
    (76) if_expr -> IF . ( expression ) { object_body_rest } ELSE { object_body_rest }

    (               shift and go to state 108


state 79

    (8) block -> if_expr .

    ID              reduce using rule 8 (block -> if_expr .)
    IF              reduce using rule 8 (block -> if_expr .)
    WHILE           reduce using rule 8 (block -> if_expr .)
    RECTANGLE       reduce using rule 8 (block -> if_expr .)
    CIRCLE          reduce using rule 8 (block -> if_expr .)
    OVAL            reduce using rule 8 (block -> if_expr .)
    }               reduce using rule 8 (block -> if_expr .)


state 80

    (10) blocks -> blocks block .

    ID              reduce using rule 10 (blocks -> blocks block .)
    IF              reduce using rule 10 (blocks -> blocks block .)
    WHILE           reduce using rule 10 (blocks -> blocks block .)
    RECTANGLE       reduce using rule 10 (blocks -> blocks block .)
    CIRCLE          reduce using rule 10 (blocks -> blocks block .)
    OVAL            reduce using rule 10 (blocks -> blocks block .)
    }               reduce using rule 10 (blocks -> blocks block .)


state 81

    (24) rotate_node -> ROTATE . ( expression )

    (               shift and go to state 109


state 82

    (22) transformation_node -> scale_node .

    ;               reduce using rule 22 (transformation_node -> scale_node .)


state 83

    (16) shape_with_transformations -> shape ; transformation_nodes .

    ID              reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    IF              reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    WHILE           reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    RECTANGLE       reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    CIRCLE          reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    OVAL            reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)
    }               reduce using rule 16 (shape_with_transformations -> shape ; transformation_nodes .)


state 84

    (21) transformation_node -> translation_node .

    ;               reduce using rule 21 (transformation_node -> translation_node .)


state 85

    (26) color_node -> COLOR . ( expression , expression , expression )

    (               shift and go to state 110


state 86

    (27) scale_node -> SCALE . ( expression )
    (28) scale_node -> SCALE . ( expression , expression )

    (               shift and go to state 111


state 87

    (23) transformation_node -> color_node .

    ;               reduce using rule 23 (transformation_node -> color_node .)


state 88

    (18) transformation_nodes -> transformation_node . ; transformation_nodes
    (19) transformation_nodes -> transformation_node . ;

    ;               shift and go to state 112


state 89

    (25) translation_node -> TRANSLATE . ( expression , expression )

    (               shift and go to state 113


state 90

    (20) transformation_node -> rotate_node .

    ;               reduce using rule 20 (transformation_node -> rotate_node .)


state 91

    (12) object_body_rest -> shape_with_transformations blocks object_body_rest .

    }               reduce using rule 12 (object_body_rest -> shape_with_transformations blocks object_body_rest .)


state 92

    (34) rectangle -> RECTANGLE ( expression . , expression , expression , expression )
    (35) rectangle -> RECTANGLE ( expression . , expression , expression , expression , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 114
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 93

    (74) expr_in_brackets -> ( expression ) .

    )               reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    ,               reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    +               reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    -               reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    *               reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    /               reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    L               reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    LE              reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    G               reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    GE              reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    EQ              reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    NE              reduce using rule 74 (expr_in_brackets -> ( expression ) .)
    ;               reduce using rule 74 (expr_in_brackets -> ( expression ) .)


state 94

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression . , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 115
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 95

    (63) two_arg_expr -> expression operator expression .
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for L resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for G resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    ,               reduce using rule 63 (two_arg_expr -> expression operator expression .)
    )               reduce using rule 63 (two_arg_expr -> expression operator expression .)
    ;               reduce using rule 63 (two_arg_expr -> expression operator expression .)
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

  ! +               [ reduce using rule 63 (two_arg_expr -> expression operator expression .) ]
  ! -               [ reduce using rule 63 (two_arg_expr -> expression operator expression .) ]
  ! *               [ reduce using rule 63 (two_arg_expr -> expression operator expression .) ]
  ! /               [ reduce using rule 63 (two_arg_expr -> expression operator expression .) ]
  ! L               [ reduce using rule 63 (two_arg_expr -> expression operator expression .) ]
  ! LE              [ reduce using rule 63 (two_arg_expr -> expression operator expression .) ]
  ! G               [ reduce using rule 63 (two_arg_expr -> expression operator expression .) ]
  ! GE              [ reduce using rule 63 (two_arg_expr -> expression operator expression .) ]
  ! EQ              [ reduce using rule 63 (two_arg_expr -> expression operator expression .) ]
  ! NE              [ reduce using rule 63 (two_arg_expr -> expression operator expression .) ]

    operator                       shift and go to state 63

state 96

    (51) declarator -> assigment .

    ,               reduce using rule 51 (declarator -> assigment .)
    ;               reduce using rule 51 (declarator -> assigment .)


state 97

    (47) declaration -> type declarators .

    ;               reduce using rule 47 (declaration -> type declarators .)


state 98

    (50) declarator -> declarator_of_id .

    ,               reduce using rule 50 (declarator -> declarator_of_id .)
    ;               reduce using rule 50 (declarator -> declarator_of_id .)


state 99

    (48) declarators -> declarator . , declarators
    (49) declarators -> declarator .

    ,               shift and go to state 116
    ;               reduce using rule 49 (declarators -> declarator .)


state 100

    (52) declarator_of_id -> ID .
    (53) assigment -> ID . = expression

    ,               reduce using rule 52 (declarator_of_id -> ID .)
    ;               reduce using rule 52 (declarator_of_id -> ID .)
    =               shift and go to state 107


state 101

    (40) scene -> SCENE ( INTEGER , INTEGER ) { declarations object_body_rest . }

    }               shift and go to state 117


state 102

    (41) declarations -> declaration ; . declarations
    (41) declarations -> . declaration ; declarations
    (42) declarations -> .
    (47) declaration -> . type declarators
    (43) type -> . int_type
    (44) type -> . float_type
    (45) int_type -> . INT_TYPE
    (46) float_type -> . FLOAT_TYPE

    ID              reduce using rule 42 (declarations -> .)
    RECTANGLE       reduce using rule 42 (declarations -> .)
    CIRCLE          reduce using rule 42 (declarations -> .)
    OVAL            reduce using rule 42 (declarations -> .)
    INT_TYPE        shift and go to state 66
    FLOAT_TYPE      shift and go to state 64

    float_type                     shift and go to state 67
    declarations                   shift and go to state 118
    int_type                       shift and go to state 69
    declaration                    shift and go to state 70
    type                           shift and go to state 65

state 103

    (36) circle -> CIRCLE ( expression , . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 119
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 104

    (37) oval -> OVAL ( expression , . expression , expression , expression )
    (38) oval -> OVAL ( expression , . expression , expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 120
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 105

    (77) while_expr -> WHILE ( . expression ) { object_body_rest }
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    id_expr                        shift and go to state 40
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    expression                     shift and go to state 121

state 106

    (7) block -> assigment ; .

    ID              reduce using rule 7 (block -> assigment ; .)
    IF              reduce using rule 7 (block -> assigment ; .)
    WHILE           reduce using rule 7 (block -> assigment ; .)
    RECTANGLE       reduce using rule 7 (block -> assigment ; .)
    CIRCLE          reduce using rule 7 (block -> assigment ; .)
    OVAL            reduce using rule 7 (block -> assigment ; .)
    }               reduce using rule 7 (block -> assigment ; .)


state 107

    (53) assigment -> ID = . expression
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 122
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 108

    (75) if_expr -> IF ( . expression ) { object_body_rest }
    (76) if_expr -> IF ( . expression ) { object_body_rest } ELSE { object_body_rest }
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    id_expr                        shift and go to state 40
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    expression                     shift and go to state 123

state 109

    (24) rotate_node -> ROTATE ( . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 124
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 110

    (26) color_node -> COLOR ( . expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 125
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 111

    (27) scale_node -> SCALE ( . expression )
    (28) scale_node -> SCALE ( . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 126
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 112

    (18) transformation_nodes -> transformation_node ; . transformation_nodes
    (19) transformation_nodes -> transformation_node ; .
    (18) transformation_nodes -> . transformation_node ; transformation_nodes
    (19) transformation_nodes -> . transformation_node ;
    (20) transformation_node -> . rotate_node
    (21) transformation_node -> . translation_node
    (22) transformation_node -> . scale_node
    (23) transformation_node -> . color_node
    (24) rotate_node -> . ROTATE ( expression )
    (25) translation_node -> . TRANSLATE ( expression , expression )
    (27) scale_node -> . SCALE ( expression )
    (28) scale_node -> . SCALE ( expression , expression )
    (26) color_node -> . COLOR ( expression , expression , expression )

    ID              reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    IF              reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    WHILE           reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    RECTANGLE       reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    CIRCLE          reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    OVAL            reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    }               reduce using rule 19 (transformation_nodes -> transformation_node ; .)
    ROTATE          shift and go to state 81
    TRANSLATE       shift and go to state 89
    SCALE           shift and go to state 86
    COLOR           shift and go to state 85

    scale_node                     shift and go to state 82
    transformation_node            shift and go to state 88
    translation_node               shift and go to state 84
    color_node                     shift and go to state 87
    transformation_nodes           shift and go to state 127
    rotate_node                    shift and go to state 90

state 113

    (25) translation_node -> TRANSLATE ( . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 128
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 114

    (34) rectangle -> RECTANGLE ( expression , . expression , expression , expression )
    (35) rectangle -> RECTANGLE ( expression , . expression , expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 129
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 115

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 130
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 116

    (48) declarators -> declarator , . declarators
    (48) declarators -> . declarator , declarators
    (49) declarators -> . declarator
    (50) declarator -> . declarator_of_id
    (51) declarator -> . assigment
    (52) declarator_of_id -> . ID
    (53) assigment -> . ID = expression

    ID              shift and go to state 100

    declarators                    shift and go to state 131
    declarator_of_id               shift and go to state 98
    assigment                      shift and go to state 96
    declarator                     shift and go to state 99

state 117

    (40) scene -> SCENE ( INTEGER , INTEGER ) { declarations object_body_rest } .

    $end            reduce using rule 40 (scene -> SCENE ( INTEGER , INTEGER ) { declarations object_body_rest } .)


state 118

    (41) declarations -> declaration ; declarations .

    ID              reduce using rule 41 (declarations -> declaration ; declarations .)
    RECTANGLE       reduce using rule 41 (declarations -> declaration ; declarations .)
    CIRCLE          reduce using rule 41 (declarations -> declaration ; declarations .)
    OVAL            reduce using rule 41 (declarations -> declaration ; declarations .)


state 119

    (36) circle -> CIRCLE ( expression , expression . , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 132
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 120

    (37) oval -> OVAL ( expression , expression . , expression , expression )
    (38) oval -> OVAL ( expression , expression . , expression , expression , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 133
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 121

    (77) while_expr -> WHILE ( expression . ) { object_body_rest }
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 134
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 122

    (53) assigment -> ID = expression .
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ;               reduce using rule 53 (assigment -> ID = expression .)
    ,               reduce using rule 53 (assigment -> ID = expression .)
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 123

    (75) if_expr -> IF ( expression . ) { object_body_rest }
    (76) if_expr -> IF ( expression . ) { object_body_rest } ELSE { object_body_rest }
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 135
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 124

    (24) rotate_node -> ROTATE ( expression . )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 136
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 125

    (26) color_node -> COLOR ( expression . , expression , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 137
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 126

    (27) scale_node -> SCALE ( expression . )
    (28) scale_node -> SCALE ( expression . , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 138
    ,               shift and go to state 139
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 127

    (18) transformation_nodes -> transformation_node ; transformation_nodes .

    ID              reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    IF              reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    WHILE           reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    RECTANGLE       reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    CIRCLE          reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    OVAL            reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)
    }               reduce using rule 18 (transformation_nodes -> transformation_node ; transformation_nodes .)


state 128

    (25) translation_node -> TRANSLATE ( expression . , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 140
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 129

    (34) rectangle -> RECTANGLE ( expression , expression . , expression , expression )
    (35) rectangle -> RECTANGLE ( expression , expression . , expression , expression , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 141
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 130

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression , expression . )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 142
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 131

    (48) declarators -> declarator , declarators .

    ;               reduce using rule 48 (declarators -> declarator , declarators .)


state 132

    (36) circle -> CIRCLE ( expression , expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 143
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 133

    (37) oval -> OVAL ( expression , expression , . expression , expression )
    (38) oval -> OVAL ( expression , expression , . expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 144
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 134

    (77) while_expr -> WHILE ( expression ) . { object_body_rest }

    {               shift and go to state 145


state 135

    (75) if_expr -> IF ( expression ) . { object_body_rest }
    (76) if_expr -> IF ( expression ) . { object_body_rest } ELSE { object_body_rest }

    {               shift and go to state 146


state 136

    (24) rotate_node -> ROTATE ( expression ) .

    ;               reduce using rule 24 (rotate_node -> ROTATE ( expression ) .)


state 137

    (26) color_node -> COLOR ( expression , . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 147
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 138

    (27) scale_node -> SCALE ( expression ) .

    ;               reduce using rule 27 (scale_node -> SCALE ( expression ) .)


state 139

    (28) scale_node -> SCALE ( expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 148
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 140

    (25) translation_node -> TRANSLATE ( expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 149
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 141

    (34) rectangle -> RECTANGLE ( expression , expression , . expression , expression )
    (35) rectangle -> RECTANGLE ( expression , expression , . expression , expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 150
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 142

    (6) default_color_definition -> DEFAULT_COLOR ( expression , expression , expression ) .

    ;               reduce using rule 6 (default_color_definition -> DEFAULT_COLOR ( expression , expression , expression ) .)


state 143

    (36) circle -> CIRCLE ( expression , expression , expression . )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 151
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 144

    (37) oval -> OVAL ( expression , expression , expression . , expression )
    (38) oval -> OVAL ( expression , expression , expression . , expression , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 152
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 145

    (77) while_expr -> WHILE ( expression ) { . object_body_rest }
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    ID              shift and go to state 24
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    primitive                      shift and go to state 20
    oval                           shift and go to state 23
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 153
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    rectangle                      shift and go to state 32

state 146

    (75) if_expr -> IF ( expression ) { . object_body_rest }
    (76) if_expr -> IF ( expression ) { . object_body_rest } ELSE { object_body_rest }
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    ID              shift and go to state 24
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    primitive                      shift and go to state 20
    oval                           shift and go to state 23
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 154
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    rectangle                      shift and go to state 32

state 147

    (26) color_node -> COLOR ( expression , expression . , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 155
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 148

    (28) scale_node -> SCALE ( expression , expression . )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 156
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 149

    (25) translation_node -> TRANSLATE ( expression , expression . )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 157
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 150

    (34) rectangle -> RECTANGLE ( expression , expression , expression . , expression )
    (35) rectangle -> RECTANGLE ( expression , expression , expression . , expression , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    ,               shift and go to state 158
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 151

    (36) circle -> CIRCLE ( expression , expression , expression ) .

    ;               reduce using rule 36 (circle -> CIRCLE ( expression , expression , expression ) .)


state 152

    (37) oval -> OVAL ( expression , expression , expression , . expression )
    (38) oval -> OVAL ( expression , expression , expression , . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 159
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 153

    (77) while_expr -> WHILE ( expression ) { object_body_rest . }

    }               shift and go to state 160


state 154

    (75) if_expr -> IF ( expression ) { object_body_rest . }
    (76) if_expr -> IF ( expression ) { object_body_rest . } ELSE { object_body_rest }

    }               shift and go to state 161


state 155

    (26) color_node -> COLOR ( expression , expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 162
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 156

    (28) scale_node -> SCALE ( expression , expression ) .

    ;               reduce using rule 28 (scale_node -> SCALE ( expression , expression ) .)


state 157

    (25) translation_node -> TRANSLATE ( expression , expression ) .

    ;               reduce using rule 25 (translation_node -> TRANSLATE ( expression , expression ) .)


state 158

    (34) rectangle -> RECTANGLE ( expression , expression , expression , . expression )
    (35) rectangle -> RECTANGLE ( expression , expression , expression , . expression , expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 163
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 159

    (37) oval -> OVAL ( expression , expression , expression , expression . )
    (38) oval -> OVAL ( expression , expression , expression , expression . , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 164
    ,               shift and go to state 165
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 160

    (77) while_expr -> WHILE ( expression ) { object_body_rest } .

    ID              reduce using rule 77 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    IF              reduce using rule 77 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    WHILE           reduce using rule 77 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    RECTANGLE       reduce using rule 77 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    CIRCLE          reduce using rule 77 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    OVAL            reduce using rule 77 (while_expr -> WHILE ( expression ) { object_body_rest } .)
    }               reduce using rule 77 (while_expr -> WHILE ( expression ) { object_body_rest } .)


state 161

    (75) if_expr -> IF ( expression ) { object_body_rest } .
    (76) if_expr -> IF ( expression ) { object_body_rest } . ELSE { object_body_rest }

    ID              reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } .)
    IF              reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } .)
    WHILE           reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } .)
    RECTANGLE       reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } .)
    CIRCLE          reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } .)
    OVAL            reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } .)
    }               reduce using rule 75 (if_expr -> IF ( expression ) { object_body_rest } .)
    ELSE            shift and go to state 166


state 162

    (26) color_node -> COLOR ( expression , expression , expression . )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 167
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 163

    (34) rectangle -> RECTANGLE ( expression , expression , expression , expression . )
    (35) rectangle -> RECTANGLE ( expression , expression , expression , expression . , expression )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 168
    ,               shift and go to state 169
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 164

    (37) oval -> OVAL ( expression , expression , expression , expression ) .

    ;               reduce using rule 37 (oval -> OVAL ( expression , expression , expression , expression ) .)


state 165

    (38) oval -> OVAL ( expression , expression , expression , expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 170
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 166

    (76) if_expr -> IF ( expression ) { object_body_rest } ELSE . { object_body_rest }

    {               shift and go to state 171


state 167

    (26) color_node -> COLOR ( expression , expression , expression ) .

    ;               reduce using rule 26 (color_node -> COLOR ( expression , expression , expression ) .)


state 168

    (34) rectangle -> RECTANGLE ( expression , expression , expression , expression ) .

    ;               reduce using rule 34 (rectangle -> RECTANGLE ( expression , expression , expression , expression ) .)


state 169

    (35) rectangle -> RECTANGLE ( expression , expression , expression , expression , . expression )
    (54) expression -> . const_expr
    (55) expression -> . id_expr
    (56) expression -> . two_arg_expr
    (57) expression -> . expr_in_brackets
    (58) const_expr -> . int_const_expr
    (59) const_expr -> . float_const_expr
    (62) id_expr -> . ID
    (63) two_arg_expr -> . expression operator expression
    (74) expr_in_brackets -> . ( expression )
    (61) int_const_expr -> . INTEGER
    (60) float_const_expr -> . FLOAT

    ID              shift and go to state 43
    (               shift and go to state 37
    INTEGER         shift and go to state 41
    FLOAT           shift and go to state 34

    int_const_expr                 shift and go to state 33
    float_const_expr               shift and go to state 35
    expr_in_brackets               shift and go to state 36
    expression                     shift and go to state 172
    const_expr                     shift and go to state 38
    two_arg_expr                   shift and go to state 39
    id_expr                        shift and go to state 40

state 170

    (38) oval -> OVAL ( expression , expression , expression , expression , expression . )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 173
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 171

    (76) if_expr -> IF ( expression ) { object_body_rest } ELSE { . object_body_rest }
    (12) object_body_rest -> . shape_with_transformations blocks object_body_rest
    (13) object_body_rest -> . shape_with_transformations blocks
    (14) object_body_rest -> . shape_without_transformations blocks object_body_rest
    (15) object_body_rest -> . shape_without_transformations blocks
    (16) shape_with_transformations -> . shape ; transformation_nodes
    (17) shape_without_transformations -> . shape ;
    (29) shape -> . primitive
    (30) shape -> . usage
    (31) primitive -> . rectangle
    (32) primitive -> . circle
    (33) primitive -> . oval
    (39) usage -> . ID
    (34) rectangle -> . RECTANGLE ( expression , expression , expression , expression )
    (35) rectangle -> . RECTANGLE ( expression , expression , expression , expression , expression )
    (36) circle -> . CIRCLE ( expression , expression , expression )
    (37) oval -> . OVAL ( expression , expression , expression , expression )
    (38) oval -> . OVAL ( expression , expression , expression , expression , expression )

    ID              shift and go to state 24
    RECTANGLE       shift and go to state 29
    CIRCLE          shift and go to state 21
    OVAL            shift and go to state 22

    primitive                      shift and go to state 20
    oval                           shift and go to state 23
    shape_without_transformations  shift and go to state 25
    object_body_rest               shift and go to state 174
    shape                          shift and go to state 27
    shape_with_transformations     shift and go to state 28
    usage                          shift and go to state 30
    circle                         shift and go to state 31
    rectangle                      shift and go to state 32

state 172

    (35) rectangle -> RECTANGLE ( expression , expression , expression , expression , expression . )
    (63) two_arg_expr -> expression . operator expression
    (64) operator -> . +
    (65) operator -> . -
    (66) operator -> . *
    (67) operator -> . /
    (68) operator -> . L
    (69) operator -> . LE
    (70) operator -> . G
    (71) operator -> . GE
    (72) operator -> . EQ
    (73) operator -> . NE

    )               shift and go to state 175
    +               shift and go to state 56
    -               shift and go to state 58
    *               shift and go to state 57
    /               shift and go to state 62
    L               shift and go to state 60
    LE              shift and go to state 52
    G               shift and go to state 55
    GE              shift and go to state 61
    EQ              shift and go to state 53
    NE              shift and go to state 54

    operator                       shift and go to state 63

state 173

    (38) oval -> OVAL ( expression , expression , expression , expression , expression ) .

    ;               reduce using rule 38 (oval -> OVAL ( expression , expression , expression , expression , expression ) .)


state 174

    (76) if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest . }

    }               shift and go to state 176


state 175

    (35) rectangle -> RECTANGLE ( expression , expression , expression , expression , expression ) .

    ;               reduce using rule 35 (rectangle -> RECTANGLE ( expression , expression , expression , expression , expression ) .)


state 176

    (76) if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .

    ID              reduce using rule 76 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    IF              reduce using rule 76 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    WHILE           reduce using rule 76 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    RECTANGLE       reduce using rule 76 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    CIRCLE          reduce using rule 76 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    OVAL            reduce using rule 76 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)
    }               reduce using rule 76 (if_expr -> IF ( expression ) { object_body_rest } ELSE { object_body_rest } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 95 resolved as shift
WARNING: shift/reduce conflict for - in state 95 resolved as shift
WARNING: shift/reduce conflict for * in state 95 resolved as shift
WARNING: shift/reduce conflict for / in state 95 resolved as shift
WARNING: shift/reduce conflict for L in state 95 resolved as shift
WARNING: shift/reduce conflict for LE in state 95 resolved as shift
WARNING: shift/reduce conflict for G in state 95 resolved as shift
WARNING: shift/reduce conflict for GE in state 95 resolved as shift
WARNING: shift/reduce conflict for EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for NE in state 95 resolved as shift
